// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace EventStore.Client.Messages {

  /// <summary>Holder for reflection information generated from messages.proto</summary>
  public static partial class MessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for messages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5tZXNzYWdlcy5wcm90bxIaRXZlbnRTdG9yZS5DbGllbnQuTWVzc2FnZXMi",
            "igEKCE5ld0V2ZW50EhAKCGV2ZW50X2lkGAEgASgMEhIKCmV2ZW50X3R5cGUY",
            "AiABKAkSGQoRZGF0YV9jb250ZW50X3R5cGUYAyABKAUSHQoVbWV0YWRhdGFf",
            "Y29udGVudF90eXBlGAQgASgFEgwKBGRhdGEYBSABKAwSEAoIbWV0YWRhdGEY",
            "BiABKAwi5AEKC0V2ZW50UmVjb3JkEhcKD2V2ZW50X3N0cmVhbV9pZBgBIAEo",
            "CRIUCgxldmVudF9udW1iZXIYAiABKAMSEAoIZXZlbnRfaWQYAyABKAwSEgoK",
            "ZXZlbnRfdHlwZRgEIAEoCRIZChFkYXRhX2NvbnRlbnRfdHlwZRgFIAEoBRId",
            "ChVtZXRhZGF0YV9jb250ZW50X3R5cGUYBiABKAUSDAoEZGF0YRgHIAEoDBIQ",
            "CghtZXRhZGF0YRgIIAEoDBIPCgdjcmVhdGVkGAkgASgDEhUKDWNyZWF0ZWRf",
            "ZXBvY2gYCiABKAMihQEKFFJlc29sdmVkSW5kZXhlZEV2ZW50EjYKBWV2ZW50",
            "GAEgASgLMicuRXZlbnRTdG9yZS5DbGllbnQuTWVzc2FnZXMuRXZlbnRSZWNv",
            "cmQSNQoEbGluaxgCIAEoCzInLkV2ZW50U3RvcmUuQ2xpZW50Lk1lc3NhZ2Vz",
            "LkV2ZW50UmVjb3JkIrEBCg1SZXNvbHZlZEV2ZW50EjYKBWV2ZW50GAEgASgL",
            "MicuRXZlbnRTdG9yZS5DbGllbnQuTWVzc2FnZXMuRXZlbnRSZWNvcmQSNQoE",
            "bGluaxgCIAEoCzInLkV2ZW50U3RvcmUuQ2xpZW50Lk1lc3NhZ2VzLkV2ZW50",
            "UmVjb3JkEhcKD2NvbW1pdF9wb3NpdGlvbhgDIAEoAxIYChBwcmVwYXJlX3Bv",
            "c2l0aW9uGAQgASgDIo4BCgtXcml0ZUV2ZW50cxIXCg9ldmVudF9zdHJlYW1f",
            "aWQYASABKAkSGAoQZXhwZWN0ZWRfdmVyc2lvbhgCIAEoAxI0CgZldmVudHMY",
            "AyADKAsyJC5FdmVudFN0b3JlLkNsaWVudC5NZXNzYWdlcy5OZXdFdmVudBIW",
            "Cg5yZXF1aXJlX21hc3RlchgEIAEoCCLnAQoUV3JpdGVFdmVudHNDb21wbGV0",
            "ZWQSOwoGcmVzdWx0GAEgASgOMisuRXZlbnRTdG9yZS5DbGllbnQuTWVzc2Fn",
            "ZXMuT3BlcmF0aW9uUmVzdWx0Eg8KB21lc3NhZ2UYAiABKAkSGgoSZmlyc3Rf",
            "ZXZlbnRfbnVtYmVyGAMgASgDEhkKEWxhc3RfZXZlbnRfbnVtYmVyGAQgASgD",
            "EhgKEHByZXBhcmVfcG9zaXRpb24YBSABKAMSFwoPY29tbWl0X3Bvc2l0aW9u",
            "GAYgASgDEhcKD2N1cnJlbnRfdmVyc2lvbhgHIAEoAyJuCgxEZWxldGVTdHJl",
            "YW0SFwoPZXZlbnRfc3RyZWFtX2lkGAEgASgJEhgKEGV4cGVjdGVkX3ZlcnNp",
            "b24YAiABKAMSFgoOcmVxdWlyZV9tYXN0ZXIYAyABKAgSEwoLaGFyZF9kZWxl",
            "dGUYBCABKAgimAEKFURlbGV0ZVN0cmVhbUNvbXBsZXRlZBI7CgZyZXN1bHQY",
            "ASABKA4yKy5FdmVudFN0b3JlLkNsaWVudC5NZXNzYWdlcy5PcGVyYXRpb25S",
            "ZXN1bHQSDwoHbWVzc2FnZRgCIAEoCRIYChBwcmVwYXJlX3Bvc2l0aW9uGAMg",
            "ASgDEhcKD2NvbW1pdF9wb3NpdGlvbhgEIAEoAyJdChBUcmFuc2FjdGlvblN0",
            "YXJ0EhcKD2V2ZW50X3N0cmVhbV9pZBgBIAEoCRIYChBleHBlY3RlZF92ZXJz",
            "aW9uGAIgASgDEhYKDnJlcXVpcmVfbWFzdGVyGAMgASgIIoEBChlUcmFuc2Fj",
            "dGlvblN0YXJ0Q29tcGxldGVkEhYKDnRyYW5zYWN0aW9uX2lkGAEgASgDEjsK",
            "BnJlc3VsdBgCIAEoDjIrLkV2ZW50U3RvcmUuQ2xpZW50Lk1lc3NhZ2VzLk9w",
            "ZXJhdGlvblJlc3VsdBIPCgdtZXNzYWdlGAMgASgJIngKEFRyYW5zYWN0aW9u",
            "V3JpdGUSFgoOdHJhbnNhY3Rpb25faWQYASABKAMSNAoGZXZlbnRzGAIgAygL",
            "MiQuRXZlbnRTdG9yZS5DbGllbnQuTWVzc2FnZXMuTmV3RXZlbnQSFgoOcmVx",
            "dWlyZV9tYXN0ZXIYAyABKAgigQEKGVRyYW5zYWN0aW9uV3JpdGVDb21wbGV0",
            "ZWQSFgoOdHJhbnNhY3Rpb25faWQYASABKAMSOwoGcmVzdWx0GAIgASgOMisu",
            "RXZlbnRTdG9yZS5DbGllbnQuTWVzc2FnZXMuT3BlcmF0aW9uUmVzdWx0Eg8K",
            "B21lc3NhZ2UYAyABKAkiQwoRVHJhbnNhY3Rpb25Db21taXQSFgoOdHJhbnNh",
            "Y3Rpb25faWQYASABKAMSFgoOcmVxdWlyZV9tYXN0ZXIYAiABKAgi7AEKGlRy",
            "YW5zYWN0aW9uQ29tbWl0Q29tcGxldGVkEhYKDnRyYW5zYWN0aW9uX2lkGAEg",
            "ASgDEjsKBnJlc3VsdBgCIAEoDjIrLkV2ZW50U3RvcmUuQ2xpZW50Lk1lc3Nh",
            "Z2VzLk9wZXJhdGlvblJlc3VsdBIPCgdtZXNzYWdlGAMgASgJEhoKEmZpcnN0",
            "X2V2ZW50X251bWJlchgEIAEoAxIZChFsYXN0X2V2ZW50X251bWJlchgFIAEo",
            "AxIYChBwcmVwYXJlX3Bvc2l0aW9uGAYgASgDEhcKD2NvbW1pdF9wb3NpdGlv",
            "bhgHIAEoAyJsCglSZWFkRXZlbnQSFwoPZXZlbnRfc3RyZWFtX2lkGAEgASgJ",
            "EhQKDGV2ZW50X251bWJlchgCIAEoAxIYChByZXNvbHZlX2xpbmtfdG9zGAMg",
            "ASgIEhYKDnJlcXVpcmVfbWFzdGVyGAQgASgIIqACChJSZWFkRXZlbnRDb21w",
            "bGV0ZWQSTgoGcmVzdWx0GAEgASgOMj4uRXZlbnRTdG9yZS5DbGllbnQuTWVz",
            "c2FnZXMuUmVhZEV2ZW50Q29tcGxldGVkLlJlYWRFdmVudFJlc3VsdBI/CgVl",
            "dmVudBgCIAEoCzIwLkV2ZW50U3RvcmUuQ2xpZW50Lk1lc3NhZ2VzLlJlc29s",
            "dmVkSW5kZXhlZEV2ZW50Eg0KBWVycm9yGAMgASgJImoKD1JlYWRFdmVudFJl",
            "c3VsdBILCgdTdWNjZXNzEAASDAoITm90Rm91bmQQARIMCghOb1N0cmVhbRAC",
            "EhEKDVN0cmVhbURlbGV0ZWQQAxIJCgVFcnJvchAEEhAKDEFjY2Vzc0Rlbmll",
            "ZBAFIosBChBSZWFkU3RyZWFtRXZlbnRzEhcKD2V2ZW50X3N0cmVhbV9pZBgB",
            "IAEoCRIZChFmcm9tX2V2ZW50X251bWJlchgCIAEoAxIRCgltYXhfY291bnQY",
            "AyABKAUSGAoQcmVzb2x2ZV9saW5rX3RvcxgEIAEoCBIWCg5yZXF1aXJlX21h",
            "c3RlchgFIAEoCCKiAwoZUmVhZFN0cmVhbUV2ZW50c0NvbXBsZXRlZBJACgZl",
            "dmVudHMYASADKAsyMC5FdmVudFN0b3JlLkNsaWVudC5NZXNzYWdlcy5SZXNv",
            "bHZlZEluZGV4ZWRFdmVudBJWCgZyZXN1bHQYAiABKA4yRi5FdmVudFN0b3Jl",
            "LkNsaWVudC5NZXNzYWdlcy5SZWFkU3RyZWFtRXZlbnRzQ29tcGxldGVkLlJl",
            "YWRTdHJlYW1SZXN1bHQSGQoRbmV4dF9ldmVudF9udW1iZXIYAyABKAMSGQoR",
            "bGFzdF9ldmVudF9udW1iZXIYBCABKAMSGAoQaXNfZW5kX29mX3N0cmVhbRgF",
            "IAEoCBIcChRsYXN0X2NvbW1pdF9wb3NpdGlvbhgGIAEoAxINCgVlcnJvchgH",
            "IAEoCSJuChBSZWFkU3RyZWFtUmVzdWx0EgsKB1N1Y2Nlc3MQABIMCghOb1N0",
            "cmVhbRABEhEKDVN0cmVhbURlbGV0ZWQQAhIPCgtOb3RNb2RpZmllZBADEgkK",
            "BUVycm9yEAQSEAoMQWNjZXNzRGVuaWVkEAUihwEKDVJlYWRBbGxFdmVudHMS",
            "FwoPY29tbWl0X3Bvc2l0aW9uGAEgASgDEhgKEHByZXBhcmVfcG9zaXRpb24Y",
            "AiABKAMSEQoJbWF4X2NvdW50GAMgASgFEhgKEHJlc29sdmVfbGlua190b3MY",
            "BCABKAgSFgoOcmVxdWlyZV9tYXN0ZXIYBSABKAgi8AIKFlJlYWRBbGxFdmVu",
            "dHNDb21wbGV0ZWQSFwoPY29tbWl0X3Bvc2l0aW9uGAEgASgDEhgKEHByZXBh",
            "cmVfcG9zaXRpb24YAiABKAMSOQoGZXZlbnRzGAMgAygLMikuRXZlbnRTdG9y",
            "ZS5DbGllbnQuTWVzc2FnZXMuUmVzb2x2ZWRFdmVudBIcChRuZXh0X2NvbW1p",
            "dF9wb3NpdGlvbhgEIAEoAxIdChVuZXh0X3ByZXBhcmVfcG9zaXRpb24YBSAB",
            "KAMSUAoGcmVzdWx0GAYgASgOMkAuRXZlbnRTdG9yZS5DbGllbnQuTWVzc2Fn",
            "ZXMuUmVhZEFsbEV2ZW50c0NvbXBsZXRlZC5SZWFkQWxsUmVzdWx0Eg0KBWVy",
            "cm9yGAcgASgJIkoKDVJlYWRBbGxSZXN1bHQSCwoHU3VjY2VzcxAAEg8KC05v",
            "dE1vZGlmaWVkEAESCQoFRXJyb3IQAhIQCgxBY2Nlc3NEZW5pZWQQAyLeAwoc",
            "Q3JlYXRlUGVyc2lzdGVudFN1YnNjcmlwdGlvbhIfChdzdWJzY3JpcHRpb25f",
            "Z3JvdXBfbmFtZRgBIAEoCRIXCg9ldmVudF9zdHJlYW1faWQYAiABKAkSGAoQ",
            "cmVzb2x2ZV9saW5rX3RvcxgDIAEoCBISCgpzdGFydF9mcm9tGAQgASgDEiQK",
            "HG1lc3NhZ2VfdGltZW91dF9taWxsaXNlY29uZHMYBSABKAUSGQoRcmVjb3Jk",
            "X3N0YXRpc3RpY3MYBiABKAgSGAoQbGl2ZV9idWZmZXJfc2l6ZRgHIAEoBRIX",
            "Cg9yZWFkX2JhdGNoX3NpemUYCCABKAUSEwoLYnVmZmVyX3NpemUYCSABKAUS",
            "FwoPbWF4X3JldHJ5X2NvdW50GAogASgFEhoKEnByZWZlcl9yb3VuZF9yb2Jp",
            "bhgLIAEoCBIdChVjaGVja3BvaW50X2FmdGVyX3RpbWUYDCABKAUSHAoUY2hl",
            "Y2twb2ludF9tYXhfY291bnQYDSABKAUSHAoUY2hlY2twb2ludF9taW5fY291",
            "bnQYDiABKAUSHAoUc3Vic2NyaWJlcl9tYXhfY291bnQYDyABKAUSHwoXbmFt",
            "ZWRfY29uc3VtZXJfc3RyYXRlZ3kYECABKAkiWAocRGVsZXRlUGVyc2lzdGVu",
            "dFN1YnNjcmlwdGlvbhIfChdzdWJzY3JpcHRpb25fZ3JvdXBfbmFtZRgBIAEo",
            "CRIXCg9ldmVudF9zdHJlYW1faWQYAiABKAki3gMKHFVwZGF0ZVBlcnNpc3Rl",
            "bnRTdWJzY3JpcHRpb24SHwoXc3Vic2NyaXB0aW9uX2dyb3VwX25hbWUYASAB",
            "KAkSFwoPZXZlbnRfc3RyZWFtX2lkGAIgASgJEhgKEHJlc29sdmVfbGlua190",
            "b3MYAyABKAgSEgoKc3RhcnRfZnJvbRgEIAEoAxIkChxtZXNzYWdlX3RpbWVv",
            "dXRfbWlsbGlzZWNvbmRzGAUgASgFEhkKEXJlY29yZF9zdGF0aXN0aWNzGAYg",
            "ASgIEhgKEGxpdmVfYnVmZmVyX3NpemUYByABKAUSFwoPcmVhZF9iYXRjaF9z",
            "aXplGAggASgFEhMKC2J1ZmZlcl9zaXplGAkgASgFEhcKD21heF9yZXRyeV9j",
            "b3VudBgKIAEoBRIaChJwcmVmZXJfcm91bmRfcm9iaW4YCyABKAgSHQoVY2hl",
            "Y2twb2ludF9hZnRlcl90aW1lGAwgASgFEhwKFGNoZWNrcG9pbnRfbWF4X2Nv",
            "dW50GA0gASgFEhwKFGNoZWNrcG9pbnRfbWluX2NvdW50GA4gASgFEhwKFHN1",
            "YnNjcmliZXJfbWF4X2NvdW50GA8gASgFEh8KF25hbWVkX2NvbnN1bWVyX3N0",
            "cmF0ZWd5GBAgASgJIo4CCiVVcGRhdGVQZXJzaXN0ZW50U3Vic2NyaXB0aW9u",
            "Q29tcGxldGVkEnQKBnJlc3VsdBgBIAEoDjJkLkV2ZW50U3RvcmUuQ2xpZW50",
            "Lk1lc3NhZ2VzLlVwZGF0ZVBlcnNpc3RlbnRTdWJzY3JpcHRpb25Db21wbGV0",
            "ZWQuVXBkYXRlUGVyc2lzdGVudFN1YnNjcmlwdGlvblJlc3VsdBIOCgZyZWFz",
            "b24YAiABKAkiXwoiVXBkYXRlUGVyc2lzdGVudFN1YnNjcmlwdGlvblJlc3Vs",
            "dBILCgdTdWNjZXNzEAASEAoMRG9lc05vdEV4aXN0EAESCAoERmFpbBACEhAK",
            "DEFjY2Vzc0RlbmllZBADIo8CCiVDcmVhdGVQZXJzaXN0ZW50U3Vic2NyaXB0",
            "aW9uQ29tcGxldGVkEnQKBnJlc3VsdBgBIAEoDjJkLkV2ZW50U3RvcmUuQ2xp",
            "ZW50Lk1lc3NhZ2VzLkNyZWF0ZVBlcnNpc3RlbnRTdWJzY3JpcHRpb25Db21w",
            "bGV0ZWQuQ3JlYXRlUGVyc2lzdGVudFN1YnNjcmlwdGlvblJlc3VsdBIOCgZy",
            "ZWFzb24YAiABKAkiYAoiQ3JlYXRlUGVyc2lzdGVudFN1YnNjcmlwdGlvblJl",
            "c3VsdBILCgdTdWNjZXNzEAASEQoNQWxyZWFkeUV4aXN0cxABEggKBEZhaWwQ",
            "AhIQCgxBY2Nlc3NEZW5pZWQQAyKOAgolRGVsZXRlUGVyc2lzdGVudFN1YnNj",
            "cmlwdGlvbkNvbXBsZXRlZBJ0CgZyZXN1bHQYASABKA4yZC5FdmVudFN0b3Jl",
            "LkNsaWVudC5NZXNzYWdlcy5EZWxldGVQZXJzaXN0ZW50U3Vic2NyaXB0aW9u",
            "Q29tcGxldGVkLkRlbGV0ZVBlcnNpc3RlbnRTdWJzY3JpcHRpb25SZXN1bHQS",
            "DgoGcmVhc29uGAIgASgJIl8KIkRlbGV0ZVBlcnNpc3RlbnRTdWJzY3JpcHRp",
            "b25SZXN1bHQSCwoHU3VjY2VzcxAAEhAKDERvZXNOb3RFeGlzdBABEggKBEZh",
            "aWwQAhIQCgxBY2Nlc3NEZW5pZWQQAyJ3Ch9Db25uZWN0VG9QZXJzaXN0ZW50",
            "U3Vic2NyaXB0aW9uEhcKD3N1YnNjcmlwdGlvbl9pZBgBIAEoCRIXCg9ldmVu",
            "dF9zdHJlYW1faWQYAiABKAkSIgoaYWxsb3dlZF9pbl9mbGlnaHRfbWVzc2Fn",
            "ZXMYAyABKAUiVwofUGVyc2lzdGVudFN1YnNjcmlwdGlvbkFja0V2ZW50cxIX",
            "Cg9zdWJzY3JpcHRpb25faWQYASABKAkSGwoTcHJvY2Vzc2VkX2V2ZW50X2lk",
            "cxgCIAMoDCKCAgofUGVyc2lzdGVudFN1YnNjcmlwdGlvbk5ha0V2ZW50cxIX",
            "Cg9zdWJzY3JpcHRpb25faWQYASABKAkSGwoTcHJvY2Vzc2VkX2V2ZW50X2lk",
            "cxgCIAMoDBIPCgdtZXNzYWdlGAMgASgJElUKBmFjdGlvbhgEIAEoDjJFLkV2",
            "ZW50U3RvcmUuQ2xpZW50Lk1lc3NhZ2VzLlBlcnNpc3RlbnRTdWJzY3JpcHRp",
            "b25OYWtFdmVudHMuTmFrQWN0aW9uIkEKCU5ha0FjdGlvbhILCgdVbmtub3du",
            "EAASCAoEUGFyaxABEgkKBVJldHJ5EAISCAoEU2tpcBADEggKBFN0b3AQBCJ2",
            "CiJQZXJzaXN0ZW50U3Vic2NyaXB0aW9uQ29uZmlybWF0aW9uEhwKFGxhc3Rf",
            "Y29tbWl0X3Bvc2l0aW9uGAEgASgDEhcKD3N1YnNjcmlwdGlvbl9pZBgCIAEo",
            "CRIZChFsYXN0X2V2ZW50X251bWJlchgDIAEoAyJsCilQZXJzaXN0ZW50U3Vi",
            "c2NyaXB0aW9uU3RyZWFtRXZlbnRBcHBlYXJlZBI/CgVldmVudBgBIAEoCzIw",
            "LkV2ZW50U3RvcmUuQ2xpZW50Lk1lc3NhZ2VzLlJlc29sdmVkSW5kZXhlZEV2",
            "ZW50IkYKEVN1YnNjcmliZVRvU3RyZWFtEhcKD2V2ZW50X3N0cmVhbV9pZBgB",
            "IAEoCRIYChByZXNvbHZlX2xpbmtfdG9zGAIgASgIIlMKGFN1YnNjcmlwdGlv",
            "bkNvbmZpcm1hdGlvbhIcChRsYXN0X2NvbW1pdF9wb3NpdGlvbhgBIAEoAxIZ",
            "ChFsYXN0X2V2ZW50X251bWJlchgCIAEoAyJPChNTdHJlYW1FdmVudEFwcGVh",
            "cmVkEjgKBWV2ZW50GAEgASgLMikuRXZlbnRTdG9yZS5DbGllbnQuTWVzc2Fn",
            "ZXMuUmVzb2x2ZWRFdmVudCIXChVVbnN1YnNjcmliZUZyb21TdHJlYW0i/AEK",
            "E1N1YnNjcmlwdGlvbkRyb3BwZWQSVgoGcmVhc29uGAEgASgOMkYuRXZlbnRT",
            "dG9yZS5DbGllbnQuTWVzc2FnZXMuU3Vic2NyaXB0aW9uRHJvcHBlZC5TdWJz",
            "Y3JpcHRpb25Ecm9wUmVhc29uIowBChZTdWJzY3JpcHRpb25Ecm9wUmVhc29u",
            "EhAKDFVuc3Vic2NyaWJlZBAAEhAKDEFjY2Vzc0RlbmllZBABEgwKCE5vdEZv",
            "dW5kEAISIQodUGVyc2lzdGVudFN1YnNjcmlwdGlvbkRlbGV0ZWQQAxIdChlT",
            "dWJzY3JpYmVyTWF4Q291bnRSZWFjaGVkEAQi9gIKCk5vdEhhbmRsZWQSRwoG",
            "cmVhc29uGAEgASgOMjcuRXZlbnRTdG9yZS5DbGllbnQuTWVzc2FnZXMuTm90",
            "SGFuZGxlZC5Ob3RIYW5kbGVkUmVhc29uEhcKD2FkZGl0aW9uYWxfaW5mbxgC",
            "IAEoDBrHAQoKTWFzdGVySW5mbxIcChRleHRlcm5hbF90Y3BfYWRkcmVzcxgB",
            "IAEoCRIZChFleHRlcm5hbF90Y3BfcG9ydBgCIAEoBRIdChVleHRlcm5hbF9o",
            "dHRwX2FkZHJlc3MYAyABKAkSGgoSZXh0ZXJuYWxfaHR0cF9wb3J0GAQgASgF",
            "EiMKG2V4dGVybmFsX3NlY3VyZV90Y3BfYWRkcmVzcxgFIAEoCRIgChhleHRl",
            "cm5hbF9zZWN1cmVfdGNwX3BvcnQYBiABKAUiPAoQTm90SGFuZGxlZFJlYXNv",
            "bhIMCghOb3RSZWFkeRAAEgsKB1Rvb0J1c3kQARINCglOb3RNYXN0ZXIQAiIS",
            "ChBTY2F2ZW5nZURhdGFiYXNlIu0BChlTY2F2ZW5nZURhdGFiYXNlQ29tcGxl",
            "dGVkElQKBnJlc3VsdBgBIAEoDjJELkV2ZW50U3RvcmUuQ2xpZW50Lk1lc3Nh",
            "Z2VzLlNjYXZlbmdlRGF0YWJhc2VDb21wbGV0ZWQuU2NhdmVuZ2VSZXN1bHQS",
            "DQoFZXJyb3IYAiABKAkSFQoNdG90YWxfdGltZV9tcxgDIAEoBRIZChF0b3Rh",
            "bF9zcGFjZV9zYXZlZBgEIAEoAyI5Cg5TY2F2ZW5nZVJlc3VsdBILCgdTdWNj",
            "ZXNzEAASDgoKSW5Qcm9ncmVzcxABEgoKBkZhaWxlZBACIjoKDklkZW50aWZ5",
            "Q2xpZW50Eg8KB3ZlcnNpb24YASABKAUSFwoPY29ubmVjdGlvbl9uYW1lGAIg",
            "ASgJIhIKEENsaWVudElkZW50aWZpZWQqsAEKD09wZXJhdGlvblJlc3VsdBIL",
            "CgdTdWNjZXNzEAASEgoOUHJlcGFyZVRpbWVvdXQQARIRCg1Db21taXRUaW1l",
            "b3V0EAISEgoORm9yd2FyZFRpbWVvdXQQAxIYChRXcm9uZ0V4cGVjdGVkVmVy",
            "c2lvbhAEEhEKDVN0cmVhbURlbGV0ZWQQBRIWChJJbnZhbGlkVHJhbnNhY3Rp",
            "b24QBhIQCgxBY2Nlc3NEZW5pZWQQB2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::EventStore.Client.Messages.OperationResult), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.Client.Messages.NewEvent), global::EventStore.Client.Messages.NewEvent.Parser, new[]{ "EventId", "EventType", "DataContentType", "MetadataContentType", "Data", "Metadata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.Client.Messages.EventRecord), global::EventStore.Client.Messages.EventRecord.Parser, new[]{ "EventStreamId", "EventNumber", "EventId", "EventType", "DataContentType", "MetadataContentType", "Data", "Metadata", "Created", "CreatedEpoch" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.Client.Messages.ResolvedIndexedEvent), global::EventStore.Client.Messages.ResolvedIndexedEvent.Parser, new[]{ "Event", "Link" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.Client.Messages.ResolvedEvent), global::EventStore.Client.Messages.ResolvedEvent.Parser, new[]{ "Event", "Link", "CommitPosition", "PreparePosition" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.Client.Messages.WriteEvents), global::EventStore.Client.Messages.WriteEvents.Parser, new[]{ "EventStreamId", "ExpectedVersion", "Events", "RequireMaster" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.Client.Messages.WriteEventsCompleted), global::EventStore.Client.Messages.WriteEventsCompleted.Parser, new[]{ "Result", "Message", "FirstEventNumber", "LastEventNumber", "PreparePosition", "CommitPosition", "CurrentVersion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.Client.Messages.DeleteStream), global::EventStore.Client.Messages.DeleteStream.Parser, new[]{ "EventStreamId", "ExpectedVersion", "RequireMaster", "HardDelete" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.Client.Messages.DeleteStreamCompleted), global::EventStore.Client.Messages.DeleteStreamCompleted.Parser, new[]{ "Result", "Message", "PreparePosition", "CommitPosition" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.Client.Messages.TransactionStart), global::EventStore.Client.Messages.TransactionStart.Parser, new[]{ "EventStreamId", "ExpectedVersion", "RequireMaster" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.Client.Messages.TransactionStartCompleted), global::EventStore.Client.Messages.TransactionStartCompleted.Parser, new[]{ "TransactionId", "Result", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.Client.Messages.TransactionWrite), global::EventStore.Client.Messages.TransactionWrite.Parser, new[]{ "TransactionId", "Events", "RequireMaster" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.Client.Messages.TransactionWriteCompleted), global::EventStore.Client.Messages.TransactionWriteCompleted.Parser, new[]{ "TransactionId", "Result", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.Client.Messages.TransactionCommit), global::EventStore.Client.Messages.TransactionCommit.Parser, new[]{ "TransactionId", "RequireMaster" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.Client.Messages.TransactionCommitCompleted), global::EventStore.Client.Messages.TransactionCommitCompleted.Parser, new[]{ "TransactionId", "Result", "Message", "FirstEventNumber", "LastEventNumber", "PreparePosition", "CommitPosition" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.Client.Messages.ReadEvent), global::EventStore.Client.Messages.ReadEvent.Parser, new[]{ "EventStreamId", "EventNumber", "ResolveLinkTos", "RequireMaster" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.Client.Messages.ReadEventCompleted), global::EventStore.Client.Messages.ReadEventCompleted.Parser, new[]{ "Result", "Event", "Error" }, null, new[]{ typeof(global::EventStore.Client.Messages.ReadEventCompleted.Types.ReadEventResult) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.Client.Messages.ReadStreamEvents), global::EventStore.Client.Messages.ReadStreamEvents.Parser, new[]{ "EventStreamId", "FromEventNumber", "MaxCount", "ResolveLinkTos", "RequireMaster" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.Client.Messages.ReadStreamEventsCompleted), global::EventStore.Client.Messages.ReadStreamEventsCompleted.Parser, new[]{ "Events", "Result", "NextEventNumber", "LastEventNumber", "IsEndOfStream", "LastCommitPosition", "Error" }, null, new[]{ typeof(global::EventStore.Client.Messages.ReadStreamEventsCompleted.Types.ReadStreamResult) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.Client.Messages.ReadAllEvents), global::EventStore.Client.Messages.ReadAllEvents.Parser, new[]{ "CommitPosition", "PreparePosition", "MaxCount", "ResolveLinkTos", "RequireMaster" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.Client.Messages.ReadAllEventsCompleted), global::EventStore.Client.Messages.ReadAllEventsCompleted.Parser, new[]{ "CommitPosition", "PreparePosition", "Events", "NextCommitPosition", "NextPreparePosition", "Result", "Error" }, null, new[]{ typeof(global::EventStore.Client.Messages.ReadAllEventsCompleted.Types.ReadAllResult) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.Client.Messages.CreatePersistentSubscription), global::EventStore.Client.Messages.CreatePersistentSubscription.Parser, new[]{ "SubscriptionGroupName", "EventStreamId", "ResolveLinkTos", "StartFrom", "MessageTimeoutMilliseconds", "RecordStatistics", "LiveBufferSize", "ReadBatchSize", "BufferSize", "MaxRetryCount", "PreferRoundRobin", "CheckpointAfterTime", "CheckpointMaxCount", "CheckpointMinCount", "SubscriberMaxCount", "NamedConsumerStrategy" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.Client.Messages.DeletePersistentSubscription), global::EventStore.Client.Messages.DeletePersistentSubscription.Parser, new[]{ "SubscriptionGroupName", "EventStreamId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.Client.Messages.UpdatePersistentSubscription), global::EventStore.Client.Messages.UpdatePersistentSubscription.Parser, new[]{ "SubscriptionGroupName", "EventStreamId", "ResolveLinkTos", "StartFrom", "MessageTimeoutMilliseconds", "RecordStatistics", "LiveBufferSize", "ReadBatchSize", "BufferSize", "MaxRetryCount", "PreferRoundRobin", "CheckpointAfterTime", "CheckpointMaxCount", "CheckpointMinCount", "SubscriberMaxCount", "NamedConsumerStrategy" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.Client.Messages.UpdatePersistentSubscriptionCompleted), global::EventStore.Client.Messages.UpdatePersistentSubscriptionCompleted.Parser, new[]{ "Result", "Reason" }, null, new[]{ typeof(global::EventStore.Client.Messages.UpdatePersistentSubscriptionCompleted.Types.UpdatePersistentSubscriptionResult) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.Client.Messages.CreatePersistentSubscriptionCompleted), global::EventStore.Client.Messages.CreatePersistentSubscriptionCompleted.Parser, new[]{ "Result", "Reason" }, null, new[]{ typeof(global::EventStore.Client.Messages.CreatePersistentSubscriptionCompleted.Types.CreatePersistentSubscriptionResult) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.Client.Messages.DeletePersistentSubscriptionCompleted), global::EventStore.Client.Messages.DeletePersistentSubscriptionCompleted.Parser, new[]{ "Result", "Reason" }, null, new[]{ typeof(global::EventStore.Client.Messages.DeletePersistentSubscriptionCompleted.Types.DeletePersistentSubscriptionResult) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.Client.Messages.ConnectToPersistentSubscription), global::EventStore.Client.Messages.ConnectToPersistentSubscription.Parser, new[]{ "SubscriptionId", "EventStreamId", "AllowedInFlightMessages" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.Client.Messages.PersistentSubscriptionAckEvents), global::EventStore.Client.Messages.PersistentSubscriptionAckEvents.Parser, new[]{ "SubscriptionId", "ProcessedEventIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.Client.Messages.PersistentSubscriptionNakEvents), global::EventStore.Client.Messages.PersistentSubscriptionNakEvents.Parser, new[]{ "SubscriptionId", "ProcessedEventIds", "Message", "Action" }, null, new[]{ typeof(global::EventStore.Client.Messages.PersistentSubscriptionNakEvents.Types.NakAction) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.Client.Messages.PersistentSubscriptionConfirmation), global::EventStore.Client.Messages.PersistentSubscriptionConfirmation.Parser, new[]{ "LastCommitPosition", "SubscriptionId", "LastEventNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.Client.Messages.PersistentSubscriptionStreamEventAppeared), global::EventStore.Client.Messages.PersistentSubscriptionStreamEventAppeared.Parser, new[]{ "Event" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.Client.Messages.SubscribeToStream), global::EventStore.Client.Messages.SubscribeToStream.Parser, new[]{ "EventStreamId", "ResolveLinkTos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.Client.Messages.SubscriptionConfirmation), global::EventStore.Client.Messages.SubscriptionConfirmation.Parser, new[]{ "LastCommitPosition", "LastEventNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.Client.Messages.StreamEventAppeared), global::EventStore.Client.Messages.StreamEventAppeared.Parser, new[]{ "Event" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.Client.Messages.UnsubscribeFromStream), global::EventStore.Client.Messages.UnsubscribeFromStream.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.Client.Messages.SubscriptionDropped), global::EventStore.Client.Messages.SubscriptionDropped.Parser, new[]{ "Reason" }, null, new[]{ typeof(global::EventStore.Client.Messages.SubscriptionDropped.Types.SubscriptionDropReason) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.Client.Messages.NotHandled), global::EventStore.Client.Messages.NotHandled.Parser, new[]{ "Reason", "AdditionalInfo" }, null, new[]{ typeof(global::EventStore.Client.Messages.NotHandled.Types.NotHandledReason) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.Client.Messages.NotHandled.Types.MasterInfo), global::EventStore.Client.Messages.NotHandled.Types.MasterInfo.Parser, new[]{ "ExternalTcpAddress", "ExternalTcpPort", "ExternalHttpAddress", "ExternalHttpPort", "ExternalSecureTcpAddress", "ExternalSecureTcpPort" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.Client.Messages.ScavengeDatabase), global::EventStore.Client.Messages.ScavengeDatabase.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.Client.Messages.ScavengeDatabaseCompleted), global::EventStore.Client.Messages.ScavengeDatabaseCompleted.Parser, new[]{ "Result", "Error", "TotalTimeMs", "TotalSpaceSaved" }, null, new[]{ typeof(global::EventStore.Client.Messages.ScavengeDatabaseCompleted.Types.ScavengeResult) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.Client.Messages.IdentifyClient), global::EventStore.Client.Messages.IdentifyClient.Parser, new[]{ "Version", "ConnectionName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::EventStore.Client.Messages.ClientIdentified), global::EventStore.Client.Messages.ClientIdentified.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum OperationResult {
    [pbr::OriginalName("Success")] Success = 0,
    [pbr::OriginalName("PrepareTimeout")] PrepareTimeout = 1,
    [pbr::OriginalName("CommitTimeout")] CommitTimeout = 2,
    [pbr::OriginalName("ForwardTimeout")] ForwardTimeout = 3,
    [pbr::OriginalName("WrongExpectedVersion")] WrongExpectedVersion = 4,
    [pbr::OriginalName("StreamDeleted")] StreamDeleted = 5,
    [pbr::OriginalName("InvalidTransaction")] InvalidTransaction = 6,
    [pbr::OriginalName("AccessDenied")] AccessDenied = 7,
  }

  #endregion

  #region Messages
  public sealed partial class NewEvent : pb::IMessage<NewEvent> {
    private static readonly pb::MessageParser<NewEvent> _parser = new pb::MessageParser<NewEvent>(() => new NewEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.Client.Messages.MessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewEvent(NewEvent other) : this() {
      eventId_ = other.eventId_;
      eventType_ = other.eventType_;
      dataContentType_ = other.dataContentType_;
      metadataContentType_ = other.metadataContentType_;
      data_ = other.data_;
      metadata_ = other.metadata_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewEvent Clone() {
      return new NewEvent(this);
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 1;
    private pb::ByteString eventId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EventId {
      get { return eventId_; }
      set {
        eventId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "event_type" field.</summary>
    public const int EventTypeFieldNumber = 2;
    private string eventType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventType {
      get { return eventType_; }
      set {
        eventType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data_content_type" field.</summary>
    public const int DataContentTypeFieldNumber = 3;
    private int dataContentType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DataContentType {
      get { return dataContentType_; }
      set {
        dataContentType_ = value;
      }
    }

    /// <summary>Field number for the "metadata_content_type" field.</summary>
    public const int MetadataContentTypeFieldNumber = 4;
    private int metadataContentType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MetadataContentType {
      get { return metadataContentType_; }
      set {
        metadataContentType_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 5;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 6;
    private pb::ByteString metadata_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Metadata {
      get { return metadata_; }
      set {
        metadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventId != other.EventId) return false;
      if (EventType != other.EventType) return false;
      if (DataContentType != other.DataContentType) return false;
      if (MetadataContentType != other.MetadataContentType) return false;
      if (Data != other.Data) return false;
      if (Metadata != other.Metadata) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventId.Length != 0) hash ^= EventId.GetHashCode();
      if (EventType.Length != 0) hash ^= EventType.GetHashCode();
      if (DataContentType != 0) hash ^= DataContentType.GetHashCode();
      if (MetadataContentType != 0) hash ^= MetadataContentType.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (Metadata.Length != 0) hash ^= Metadata.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(EventId);
      }
      if (EventType.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EventType);
      }
      if (DataContentType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DataContentType);
      }
      if (MetadataContentType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MetadataContentType);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Data);
      }
      if (Metadata.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Metadata);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EventId);
      }
      if (EventType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventType);
      }
      if (DataContentType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataContentType);
      }
      if (MetadataContentType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MetadataContentType);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (Metadata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Metadata);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewEvent other) {
      if (other == null) {
        return;
      }
      if (other.EventId.Length != 0) {
        EventId = other.EventId;
      }
      if (other.EventType.Length != 0) {
        EventType = other.EventType;
      }
      if (other.DataContentType != 0) {
        DataContentType = other.DataContentType;
      }
      if (other.MetadataContentType != 0) {
        MetadataContentType = other.MetadataContentType;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.Metadata.Length != 0) {
        Metadata = other.Metadata;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            EventId = input.ReadBytes();
            break;
          }
          case 18: {
            EventType = input.ReadString();
            break;
          }
          case 24: {
            DataContentType = input.ReadInt32();
            break;
          }
          case 32: {
            MetadataContentType = input.ReadInt32();
            break;
          }
          case 42: {
            Data = input.ReadBytes();
            break;
          }
          case 50: {
            Metadata = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EventRecord : pb::IMessage<EventRecord> {
    private static readonly pb::MessageParser<EventRecord> _parser = new pb::MessageParser<EventRecord>(() => new EventRecord());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EventRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.Client.Messages.MessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRecord(EventRecord other) : this() {
      eventStreamId_ = other.eventStreamId_;
      eventNumber_ = other.eventNumber_;
      eventId_ = other.eventId_;
      eventType_ = other.eventType_;
      dataContentType_ = other.dataContentType_;
      metadataContentType_ = other.metadataContentType_;
      data_ = other.data_;
      metadata_ = other.metadata_;
      created_ = other.created_;
      createdEpoch_ = other.createdEpoch_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventRecord Clone() {
      return new EventRecord(this);
    }

    /// <summary>Field number for the "event_stream_id" field.</summary>
    public const int EventStreamIdFieldNumber = 1;
    private string eventStreamId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventStreamId {
      get { return eventStreamId_; }
      set {
        eventStreamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "event_number" field.</summary>
    public const int EventNumberFieldNumber = 2;
    private long eventNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EventNumber {
      get { return eventNumber_; }
      set {
        eventNumber_ = value;
      }
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 3;
    private pb::ByteString eventId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EventId {
      get { return eventId_; }
      set {
        eventId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "event_type" field.</summary>
    public const int EventTypeFieldNumber = 4;
    private string eventType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventType {
      get { return eventType_; }
      set {
        eventType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data_content_type" field.</summary>
    public const int DataContentTypeFieldNumber = 5;
    private int dataContentType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DataContentType {
      get { return dataContentType_; }
      set {
        dataContentType_ = value;
      }
    }

    /// <summary>Field number for the "metadata_content_type" field.</summary>
    public const int MetadataContentTypeFieldNumber = 6;
    private int metadataContentType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MetadataContentType {
      get { return metadataContentType_; }
      set {
        metadataContentType_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 7;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 8;
    private pb::ByteString metadata_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Metadata {
      get { return metadata_; }
      set {
        metadata_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "created" field.</summary>
    public const int CreatedFieldNumber = 9;
    private long created_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Created {
      get { return created_; }
      set {
        created_ = value;
      }
    }

    /// <summary>Field number for the "created_epoch" field.</summary>
    public const int CreatedEpochFieldNumber = 10;
    private long createdEpoch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreatedEpoch {
      get { return createdEpoch_; }
      set {
        createdEpoch_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EventRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EventRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventStreamId != other.EventStreamId) return false;
      if (EventNumber != other.EventNumber) return false;
      if (EventId != other.EventId) return false;
      if (EventType != other.EventType) return false;
      if (DataContentType != other.DataContentType) return false;
      if (MetadataContentType != other.MetadataContentType) return false;
      if (Data != other.Data) return false;
      if (Metadata != other.Metadata) return false;
      if (Created != other.Created) return false;
      if (CreatedEpoch != other.CreatedEpoch) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventStreamId.Length != 0) hash ^= EventStreamId.GetHashCode();
      if (EventNumber != 0L) hash ^= EventNumber.GetHashCode();
      if (EventId.Length != 0) hash ^= EventId.GetHashCode();
      if (EventType.Length != 0) hash ^= EventType.GetHashCode();
      if (DataContentType != 0) hash ^= DataContentType.GetHashCode();
      if (MetadataContentType != 0) hash ^= MetadataContentType.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (Metadata.Length != 0) hash ^= Metadata.GetHashCode();
      if (Created != 0L) hash ^= Created.GetHashCode();
      if (CreatedEpoch != 0L) hash ^= CreatedEpoch.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventStreamId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EventStreamId);
      }
      if (EventNumber != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(EventNumber);
      }
      if (EventId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(EventId);
      }
      if (EventType.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EventType);
      }
      if (DataContentType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DataContentType);
      }
      if (MetadataContentType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MetadataContentType);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(Data);
      }
      if (Metadata.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(Metadata);
      }
      if (Created != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(Created);
      }
      if (CreatedEpoch != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(CreatedEpoch);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventStreamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventStreamId);
      }
      if (EventNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EventNumber);
      }
      if (EventId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EventId);
      }
      if (EventType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventType);
      }
      if (DataContentType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DataContentType);
      }
      if (MetadataContentType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MetadataContentType);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (Metadata.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Metadata);
      }
      if (Created != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Created);
      }
      if (CreatedEpoch != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedEpoch);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EventRecord other) {
      if (other == null) {
        return;
      }
      if (other.EventStreamId.Length != 0) {
        EventStreamId = other.EventStreamId;
      }
      if (other.EventNumber != 0L) {
        EventNumber = other.EventNumber;
      }
      if (other.EventId.Length != 0) {
        EventId = other.EventId;
      }
      if (other.EventType.Length != 0) {
        EventType = other.EventType;
      }
      if (other.DataContentType != 0) {
        DataContentType = other.DataContentType;
      }
      if (other.MetadataContentType != 0) {
        MetadataContentType = other.MetadataContentType;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.Metadata.Length != 0) {
        Metadata = other.Metadata;
      }
      if (other.Created != 0L) {
        Created = other.Created;
      }
      if (other.CreatedEpoch != 0L) {
        CreatedEpoch = other.CreatedEpoch;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            EventStreamId = input.ReadString();
            break;
          }
          case 16: {
            EventNumber = input.ReadInt64();
            break;
          }
          case 26: {
            EventId = input.ReadBytes();
            break;
          }
          case 34: {
            EventType = input.ReadString();
            break;
          }
          case 40: {
            DataContentType = input.ReadInt32();
            break;
          }
          case 48: {
            MetadataContentType = input.ReadInt32();
            break;
          }
          case 58: {
            Data = input.ReadBytes();
            break;
          }
          case 66: {
            Metadata = input.ReadBytes();
            break;
          }
          case 72: {
            Created = input.ReadInt64();
            break;
          }
          case 80: {
            CreatedEpoch = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResolvedIndexedEvent : pb::IMessage<ResolvedIndexedEvent> {
    private static readonly pb::MessageParser<ResolvedIndexedEvent> _parser = new pb::MessageParser<ResolvedIndexedEvent>(() => new ResolvedIndexedEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResolvedIndexedEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.Client.Messages.MessagesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResolvedIndexedEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResolvedIndexedEvent(ResolvedIndexedEvent other) : this() {
      Event = other.event_ != null ? other.Event.Clone() : null;
      Link = other.link_ != null ? other.Link.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResolvedIndexedEvent Clone() {
      return new ResolvedIndexedEvent(this);
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 1;
    private global::EventStore.Client.Messages.EventRecord event_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.Client.Messages.EventRecord Event {
      get { return event_; }
      set {
        event_ = value;
      }
    }

    /// <summary>Field number for the "link" field.</summary>
    public const int LinkFieldNumber = 2;
    private global::EventStore.Client.Messages.EventRecord link_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.Client.Messages.EventRecord Link {
      get { return link_; }
      set {
        link_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResolvedIndexedEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResolvedIndexedEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Event, other.Event)) return false;
      if (!object.Equals(Link, other.Link)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (event_ != null) hash ^= Event.GetHashCode();
      if (link_ != null) hash ^= Link.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (event_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Event);
      }
      if (link_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Link);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (event_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Event);
      }
      if (link_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Link);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResolvedIndexedEvent other) {
      if (other == null) {
        return;
      }
      if (other.event_ != null) {
        if (event_ == null) {
          event_ = new global::EventStore.Client.Messages.EventRecord();
        }
        Event.MergeFrom(other.Event);
      }
      if (other.link_ != null) {
        if (link_ == null) {
          link_ = new global::EventStore.Client.Messages.EventRecord();
        }
        Link.MergeFrom(other.Link);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (event_ == null) {
              event_ = new global::EventStore.Client.Messages.EventRecord();
            }
            input.ReadMessage(event_);
            break;
          }
          case 18: {
            if (link_ == null) {
              link_ = new global::EventStore.Client.Messages.EventRecord();
            }
            input.ReadMessage(link_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResolvedEvent : pb::IMessage<ResolvedEvent> {
    private static readonly pb::MessageParser<ResolvedEvent> _parser = new pb::MessageParser<ResolvedEvent>(() => new ResolvedEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResolvedEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.Client.Messages.MessagesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResolvedEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResolvedEvent(ResolvedEvent other) : this() {
      Event = other.event_ != null ? other.Event.Clone() : null;
      Link = other.link_ != null ? other.Link.Clone() : null;
      commitPosition_ = other.commitPosition_;
      preparePosition_ = other.preparePosition_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResolvedEvent Clone() {
      return new ResolvedEvent(this);
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 1;
    private global::EventStore.Client.Messages.EventRecord event_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.Client.Messages.EventRecord Event {
      get { return event_; }
      set {
        event_ = value;
      }
    }

    /// <summary>Field number for the "link" field.</summary>
    public const int LinkFieldNumber = 2;
    private global::EventStore.Client.Messages.EventRecord link_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.Client.Messages.EventRecord Link {
      get { return link_; }
      set {
        link_ = value;
      }
    }

    /// <summary>Field number for the "commit_position" field.</summary>
    public const int CommitPositionFieldNumber = 3;
    private long commitPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CommitPosition {
      get { return commitPosition_; }
      set {
        commitPosition_ = value;
      }
    }

    /// <summary>Field number for the "prepare_position" field.</summary>
    public const int PreparePositionFieldNumber = 4;
    private long preparePosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PreparePosition {
      get { return preparePosition_; }
      set {
        preparePosition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResolvedEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResolvedEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Event, other.Event)) return false;
      if (!object.Equals(Link, other.Link)) return false;
      if (CommitPosition != other.CommitPosition) return false;
      if (PreparePosition != other.PreparePosition) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (event_ != null) hash ^= Event.GetHashCode();
      if (link_ != null) hash ^= Link.GetHashCode();
      if (CommitPosition != 0L) hash ^= CommitPosition.GetHashCode();
      if (PreparePosition != 0L) hash ^= PreparePosition.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (event_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Event);
      }
      if (link_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Link);
      }
      if (CommitPosition != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CommitPosition);
      }
      if (PreparePosition != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(PreparePosition);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (event_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Event);
      }
      if (link_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Link);
      }
      if (CommitPosition != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CommitPosition);
      }
      if (PreparePosition != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PreparePosition);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResolvedEvent other) {
      if (other == null) {
        return;
      }
      if (other.event_ != null) {
        if (event_ == null) {
          event_ = new global::EventStore.Client.Messages.EventRecord();
        }
        Event.MergeFrom(other.Event);
      }
      if (other.link_ != null) {
        if (link_ == null) {
          link_ = new global::EventStore.Client.Messages.EventRecord();
        }
        Link.MergeFrom(other.Link);
      }
      if (other.CommitPosition != 0L) {
        CommitPosition = other.CommitPosition;
      }
      if (other.PreparePosition != 0L) {
        PreparePosition = other.PreparePosition;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (event_ == null) {
              event_ = new global::EventStore.Client.Messages.EventRecord();
            }
            input.ReadMessage(event_);
            break;
          }
          case 18: {
            if (link_ == null) {
              link_ = new global::EventStore.Client.Messages.EventRecord();
            }
            input.ReadMessage(link_);
            break;
          }
          case 24: {
            CommitPosition = input.ReadInt64();
            break;
          }
          case 32: {
            PreparePosition = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WriteEvents : pb::IMessage<WriteEvents> {
    private static readonly pb::MessageParser<WriteEvents> _parser = new pb::MessageParser<WriteEvents>(() => new WriteEvents());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WriteEvents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.Client.Messages.MessagesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteEvents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteEvents(WriteEvents other) : this() {
      eventStreamId_ = other.eventStreamId_;
      expectedVersion_ = other.expectedVersion_;
      events_ = other.events_.Clone();
      requireMaster_ = other.requireMaster_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteEvents Clone() {
      return new WriteEvents(this);
    }

    /// <summary>Field number for the "event_stream_id" field.</summary>
    public const int EventStreamIdFieldNumber = 1;
    private string eventStreamId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventStreamId {
      get { return eventStreamId_; }
      set {
        eventStreamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expected_version" field.</summary>
    public const int ExpectedVersionFieldNumber = 2;
    private long expectedVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExpectedVersion {
      get { return expectedVersion_; }
      set {
        expectedVersion_ = value;
      }
    }

    /// <summary>Field number for the "events" field.</summary>
    public const int EventsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::EventStore.Client.Messages.NewEvent> _repeated_events_codec
        = pb::FieldCodec.ForMessage(26, global::EventStore.Client.Messages.NewEvent.Parser);
    private readonly pbc::RepeatedField<global::EventStore.Client.Messages.NewEvent> events_ = new pbc::RepeatedField<global::EventStore.Client.Messages.NewEvent>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::EventStore.Client.Messages.NewEvent> Events {
      get { return events_; }
    }

    /// <summary>Field number for the "require_master" field.</summary>
    public const int RequireMasterFieldNumber = 4;
    private bool requireMaster_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RequireMaster {
      get { return requireMaster_; }
      set {
        requireMaster_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WriteEvents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WriteEvents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventStreamId != other.EventStreamId) return false;
      if (ExpectedVersion != other.ExpectedVersion) return false;
      if(!events_.Equals(other.events_)) return false;
      if (RequireMaster != other.RequireMaster) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventStreamId.Length != 0) hash ^= EventStreamId.GetHashCode();
      if (ExpectedVersion != 0L) hash ^= ExpectedVersion.GetHashCode();
      hash ^= events_.GetHashCode();
      if (RequireMaster != false) hash ^= RequireMaster.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventStreamId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EventStreamId);
      }
      if (ExpectedVersion != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ExpectedVersion);
      }
      events_.WriteTo(output, _repeated_events_codec);
      if (RequireMaster != false) {
        output.WriteRawTag(32);
        output.WriteBool(RequireMaster);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventStreamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventStreamId);
      }
      if (ExpectedVersion != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpectedVersion);
      }
      size += events_.CalculateSize(_repeated_events_codec);
      if (RequireMaster != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WriteEvents other) {
      if (other == null) {
        return;
      }
      if (other.EventStreamId.Length != 0) {
        EventStreamId = other.EventStreamId;
      }
      if (other.ExpectedVersion != 0L) {
        ExpectedVersion = other.ExpectedVersion;
      }
      events_.Add(other.events_);
      if (other.RequireMaster != false) {
        RequireMaster = other.RequireMaster;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            EventStreamId = input.ReadString();
            break;
          }
          case 16: {
            ExpectedVersion = input.ReadInt64();
            break;
          }
          case 26: {
            events_.AddEntriesFrom(input, _repeated_events_codec);
            break;
          }
          case 32: {
            RequireMaster = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WriteEventsCompleted : pb::IMessage<WriteEventsCompleted> {
    private static readonly pb::MessageParser<WriteEventsCompleted> _parser = new pb::MessageParser<WriteEventsCompleted>(() => new WriteEventsCompleted());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WriteEventsCompleted> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.Client.Messages.MessagesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteEventsCompleted() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteEventsCompleted(WriteEventsCompleted other) : this() {
      result_ = other.result_;
      message_ = other.message_;
      firstEventNumber_ = other.firstEventNumber_;
      lastEventNumber_ = other.lastEventNumber_;
      preparePosition_ = other.preparePosition_;
      commitPosition_ = other.commitPosition_;
      currentVersion_ = other.currentVersion_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteEventsCompleted Clone() {
      return new WriteEventsCompleted(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::EventStore.Client.Messages.OperationResult result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.Client.Messages.OperationResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "first_event_number" field.</summary>
    public const int FirstEventNumberFieldNumber = 3;
    private long firstEventNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FirstEventNumber {
      get { return firstEventNumber_; }
      set {
        firstEventNumber_ = value;
      }
    }

    /// <summary>Field number for the "last_event_number" field.</summary>
    public const int LastEventNumberFieldNumber = 4;
    private long lastEventNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastEventNumber {
      get { return lastEventNumber_; }
      set {
        lastEventNumber_ = value;
      }
    }

    /// <summary>Field number for the "prepare_position" field.</summary>
    public const int PreparePositionFieldNumber = 5;
    private long preparePosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PreparePosition {
      get { return preparePosition_; }
      set {
        preparePosition_ = value;
      }
    }

    /// <summary>Field number for the "commit_position" field.</summary>
    public const int CommitPositionFieldNumber = 6;
    private long commitPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CommitPosition {
      get { return commitPosition_; }
      set {
        commitPosition_ = value;
      }
    }

    /// <summary>Field number for the "current_version" field.</summary>
    public const int CurrentVersionFieldNumber = 7;
    private long currentVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurrentVersion {
      get { return currentVersion_; }
      set {
        currentVersion_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WriteEventsCompleted);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WriteEventsCompleted other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (Message != other.Message) return false;
      if (FirstEventNumber != other.FirstEventNumber) return false;
      if (LastEventNumber != other.LastEventNumber) return false;
      if (PreparePosition != other.PreparePosition) return false;
      if (CommitPosition != other.CommitPosition) return false;
      if (CurrentVersion != other.CurrentVersion) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (FirstEventNumber != 0L) hash ^= FirstEventNumber.GetHashCode();
      if (LastEventNumber != 0L) hash ^= LastEventNumber.GetHashCode();
      if (PreparePosition != 0L) hash ^= PreparePosition.GetHashCode();
      if (CommitPosition != 0L) hash ^= CommitPosition.GetHashCode();
      if (CurrentVersion != 0L) hash ^= CurrentVersion.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (FirstEventNumber != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(FirstEventNumber);
      }
      if (LastEventNumber != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(LastEventNumber);
      }
      if (PreparePosition != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(PreparePosition);
      }
      if (CommitPosition != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(CommitPosition);
      }
      if (CurrentVersion != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(CurrentVersion);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (FirstEventNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FirstEventNumber);
      }
      if (LastEventNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastEventNumber);
      }
      if (PreparePosition != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PreparePosition);
      }
      if (CommitPosition != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CommitPosition);
      }
      if (CurrentVersion != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrentVersion);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WriteEventsCompleted other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.FirstEventNumber != 0L) {
        FirstEventNumber = other.FirstEventNumber;
      }
      if (other.LastEventNumber != 0L) {
        LastEventNumber = other.LastEventNumber;
      }
      if (other.PreparePosition != 0L) {
        PreparePosition = other.PreparePosition;
      }
      if (other.CommitPosition != 0L) {
        CommitPosition = other.CommitPosition;
      }
      if (other.CurrentVersion != 0L) {
        CurrentVersion = other.CurrentVersion;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            result_ = (global::EventStore.Client.Messages.OperationResult) input.ReadEnum();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
          case 24: {
            FirstEventNumber = input.ReadInt64();
            break;
          }
          case 32: {
            LastEventNumber = input.ReadInt64();
            break;
          }
          case 40: {
            PreparePosition = input.ReadInt64();
            break;
          }
          case 48: {
            CommitPosition = input.ReadInt64();
            break;
          }
          case 56: {
            CurrentVersion = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteStream : pb::IMessage<DeleteStream> {
    private static readonly pb::MessageParser<DeleteStream> _parser = new pb::MessageParser<DeleteStream>(() => new DeleteStream());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteStream> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.Client.Messages.MessagesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteStream() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteStream(DeleteStream other) : this() {
      eventStreamId_ = other.eventStreamId_;
      expectedVersion_ = other.expectedVersion_;
      requireMaster_ = other.requireMaster_;
      hardDelete_ = other.hardDelete_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteStream Clone() {
      return new DeleteStream(this);
    }

    /// <summary>Field number for the "event_stream_id" field.</summary>
    public const int EventStreamIdFieldNumber = 1;
    private string eventStreamId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventStreamId {
      get { return eventStreamId_; }
      set {
        eventStreamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expected_version" field.</summary>
    public const int ExpectedVersionFieldNumber = 2;
    private long expectedVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExpectedVersion {
      get { return expectedVersion_; }
      set {
        expectedVersion_ = value;
      }
    }

    /// <summary>Field number for the "require_master" field.</summary>
    public const int RequireMasterFieldNumber = 3;
    private bool requireMaster_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RequireMaster {
      get { return requireMaster_; }
      set {
        requireMaster_ = value;
      }
    }

    /// <summary>Field number for the "hard_delete" field.</summary>
    public const int HardDeleteFieldNumber = 4;
    private bool hardDelete_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HardDelete {
      get { return hardDelete_; }
      set {
        hardDelete_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteStream);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteStream other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventStreamId != other.EventStreamId) return false;
      if (ExpectedVersion != other.ExpectedVersion) return false;
      if (RequireMaster != other.RequireMaster) return false;
      if (HardDelete != other.HardDelete) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventStreamId.Length != 0) hash ^= EventStreamId.GetHashCode();
      if (ExpectedVersion != 0L) hash ^= ExpectedVersion.GetHashCode();
      if (RequireMaster != false) hash ^= RequireMaster.GetHashCode();
      if (HardDelete != false) hash ^= HardDelete.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventStreamId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EventStreamId);
      }
      if (ExpectedVersion != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ExpectedVersion);
      }
      if (RequireMaster != false) {
        output.WriteRawTag(24);
        output.WriteBool(RequireMaster);
      }
      if (HardDelete != false) {
        output.WriteRawTag(32);
        output.WriteBool(HardDelete);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventStreamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventStreamId);
      }
      if (ExpectedVersion != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpectedVersion);
      }
      if (RequireMaster != false) {
        size += 1 + 1;
      }
      if (HardDelete != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteStream other) {
      if (other == null) {
        return;
      }
      if (other.EventStreamId.Length != 0) {
        EventStreamId = other.EventStreamId;
      }
      if (other.ExpectedVersion != 0L) {
        ExpectedVersion = other.ExpectedVersion;
      }
      if (other.RequireMaster != false) {
        RequireMaster = other.RequireMaster;
      }
      if (other.HardDelete != false) {
        HardDelete = other.HardDelete;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            EventStreamId = input.ReadString();
            break;
          }
          case 16: {
            ExpectedVersion = input.ReadInt64();
            break;
          }
          case 24: {
            RequireMaster = input.ReadBool();
            break;
          }
          case 32: {
            HardDelete = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteStreamCompleted : pb::IMessage<DeleteStreamCompleted> {
    private static readonly pb::MessageParser<DeleteStreamCompleted> _parser = new pb::MessageParser<DeleteStreamCompleted>(() => new DeleteStreamCompleted());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteStreamCompleted> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.Client.Messages.MessagesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteStreamCompleted() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteStreamCompleted(DeleteStreamCompleted other) : this() {
      result_ = other.result_;
      message_ = other.message_;
      preparePosition_ = other.preparePosition_;
      commitPosition_ = other.commitPosition_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteStreamCompleted Clone() {
      return new DeleteStreamCompleted(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::EventStore.Client.Messages.OperationResult result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.Client.Messages.OperationResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "prepare_position" field.</summary>
    public const int PreparePositionFieldNumber = 3;
    private long preparePosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PreparePosition {
      get { return preparePosition_; }
      set {
        preparePosition_ = value;
      }
    }

    /// <summary>Field number for the "commit_position" field.</summary>
    public const int CommitPositionFieldNumber = 4;
    private long commitPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CommitPosition {
      get { return commitPosition_; }
      set {
        commitPosition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteStreamCompleted);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteStreamCompleted other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (Message != other.Message) return false;
      if (PreparePosition != other.PreparePosition) return false;
      if (CommitPosition != other.CommitPosition) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (PreparePosition != 0L) hash ^= PreparePosition.GetHashCode();
      if (CommitPosition != 0L) hash ^= CommitPosition.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (PreparePosition != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(PreparePosition);
      }
      if (CommitPosition != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(CommitPosition);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (PreparePosition != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PreparePosition);
      }
      if (CommitPosition != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CommitPosition);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteStreamCompleted other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.PreparePosition != 0L) {
        PreparePosition = other.PreparePosition;
      }
      if (other.CommitPosition != 0L) {
        CommitPosition = other.CommitPosition;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            result_ = (global::EventStore.Client.Messages.OperationResult) input.ReadEnum();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
          case 24: {
            PreparePosition = input.ReadInt64();
            break;
          }
          case 32: {
            CommitPosition = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransactionStart : pb::IMessage<TransactionStart> {
    private static readonly pb::MessageParser<TransactionStart> _parser = new pb::MessageParser<TransactionStart>(() => new TransactionStart());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionStart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.Client.Messages.MessagesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionStart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionStart(TransactionStart other) : this() {
      eventStreamId_ = other.eventStreamId_;
      expectedVersion_ = other.expectedVersion_;
      requireMaster_ = other.requireMaster_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionStart Clone() {
      return new TransactionStart(this);
    }

    /// <summary>Field number for the "event_stream_id" field.</summary>
    public const int EventStreamIdFieldNumber = 1;
    private string eventStreamId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventStreamId {
      get { return eventStreamId_; }
      set {
        eventStreamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expected_version" field.</summary>
    public const int ExpectedVersionFieldNumber = 2;
    private long expectedVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExpectedVersion {
      get { return expectedVersion_; }
      set {
        expectedVersion_ = value;
      }
    }

    /// <summary>Field number for the "require_master" field.</summary>
    public const int RequireMasterFieldNumber = 3;
    private bool requireMaster_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RequireMaster {
      get { return requireMaster_; }
      set {
        requireMaster_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionStart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionStart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventStreamId != other.EventStreamId) return false;
      if (ExpectedVersion != other.ExpectedVersion) return false;
      if (RequireMaster != other.RequireMaster) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventStreamId.Length != 0) hash ^= EventStreamId.GetHashCode();
      if (ExpectedVersion != 0L) hash ^= ExpectedVersion.GetHashCode();
      if (RequireMaster != false) hash ^= RequireMaster.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventStreamId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EventStreamId);
      }
      if (ExpectedVersion != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ExpectedVersion);
      }
      if (RequireMaster != false) {
        output.WriteRawTag(24);
        output.WriteBool(RequireMaster);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventStreamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventStreamId);
      }
      if (ExpectedVersion != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpectedVersion);
      }
      if (RequireMaster != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionStart other) {
      if (other == null) {
        return;
      }
      if (other.EventStreamId.Length != 0) {
        EventStreamId = other.EventStreamId;
      }
      if (other.ExpectedVersion != 0L) {
        ExpectedVersion = other.ExpectedVersion;
      }
      if (other.RequireMaster != false) {
        RequireMaster = other.RequireMaster;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            EventStreamId = input.ReadString();
            break;
          }
          case 16: {
            ExpectedVersion = input.ReadInt64();
            break;
          }
          case 24: {
            RequireMaster = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransactionStartCompleted : pb::IMessage<TransactionStartCompleted> {
    private static readonly pb::MessageParser<TransactionStartCompleted> _parser = new pb::MessageParser<TransactionStartCompleted>(() => new TransactionStartCompleted());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionStartCompleted> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.Client.Messages.MessagesReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionStartCompleted() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionStartCompleted(TransactionStartCompleted other) : this() {
      transactionId_ = other.transactionId_;
      result_ = other.result_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionStartCompleted Clone() {
      return new TransactionStartCompleted(this);
    }

    /// <summary>Field number for the "transaction_id" field.</summary>
    public const int TransactionIdFieldNumber = 1;
    private long transactionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionId {
      get { return transactionId_; }
      set {
        transactionId_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private global::EventStore.Client.Messages.OperationResult result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.Client.Messages.OperationResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 3;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionStartCompleted);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionStartCompleted other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionId != other.TransactionId) return false;
      if (Result != other.Result) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransactionId != 0L) hash ^= TransactionId.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransactionId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TransactionId);
      }
      if (Result != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Result);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransactionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TransactionId);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionStartCompleted other) {
      if (other == null) {
        return;
      }
      if (other.TransactionId != 0L) {
        TransactionId = other.TransactionId;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TransactionId = input.ReadInt64();
            break;
          }
          case 16: {
            result_ = (global::EventStore.Client.Messages.OperationResult) input.ReadEnum();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransactionWrite : pb::IMessage<TransactionWrite> {
    private static readonly pb::MessageParser<TransactionWrite> _parser = new pb::MessageParser<TransactionWrite>(() => new TransactionWrite());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionWrite> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.Client.Messages.MessagesReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionWrite() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionWrite(TransactionWrite other) : this() {
      transactionId_ = other.transactionId_;
      events_ = other.events_.Clone();
      requireMaster_ = other.requireMaster_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionWrite Clone() {
      return new TransactionWrite(this);
    }

    /// <summary>Field number for the "transaction_id" field.</summary>
    public const int TransactionIdFieldNumber = 1;
    private long transactionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionId {
      get { return transactionId_; }
      set {
        transactionId_ = value;
      }
    }

    /// <summary>Field number for the "events" field.</summary>
    public const int EventsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::EventStore.Client.Messages.NewEvent> _repeated_events_codec
        = pb::FieldCodec.ForMessage(18, global::EventStore.Client.Messages.NewEvent.Parser);
    private readonly pbc::RepeatedField<global::EventStore.Client.Messages.NewEvent> events_ = new pbc::RepeatedField<global::EventStore.Client.Messages.NewEvent>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::EventStore.Client.Messages.NewEvent> Events {
      get { return events_; }
    }

    /// <summary>Field number for the "require_master" field.</summary>
    public const int RequireMasterFieldNumber = 3;
    private bool requireMaster_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RequireMaster {
      get { return requireMaster_; }
      set {
        requireMaster_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionWrite);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionWrite other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionId != other.TransactionId) return false;
      if(!events_.Equals(other.events_)) return false;
      if (RequireMaster != other.RequireMaster) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransactionId != 0L) hash ^= TransactionId.GetHashCode();
      hash ^= events_.GetHashCode();
      if (RequireMaster != false) hash ^= RequireMaster.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransactionId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TransactionId);
      }
      events_.WriteTo(output, _repeated_events_codec);
      if (RequireMaster != false) {
        output.WriteRawTag(24);
        output.WriteBool(RequireMaster);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransactionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TransactionId);
      }
      size += events_.CalculateSize(_repeated_events_codec);
      if (RequireMaster != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionWrite other) {
      if (other == null) {
        return;
      }
      if (other.TransactionId != 0L) {
        TransactionId = other.TransactionId;
      }
      events_.Add(other.events_);
      if (other.RequireMaster != false) {
        RequireMaster = other.RequireMaster;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TransactionId = input.ReadInt64();
            break;
          }
          case 18: {
            events_.AddEntriesFrom(input, _repeated_events_codec);
            break;
          }
          case 24: {
            RequireMaster = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransactionWriteCompleted : pb::IMessage<TransactionWriteCompleted> {
    private static readonly pb::MessageParser<TransactionWriteCompleted> _parser = new pb::MessageParser<TransactionWriteCompleted>(() => new TransactionWriteCompleted());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionWriteCompleted> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.Client.Messages.MessagesReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionWriteCompleted() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionWriteCompleted(TransactionWriteCompleted other) : this() {
      transactionId_ = other.transactionId_;
      result_ = other.result_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionWriteCompleted Clone() {
      return new TransactionWriteCompleted(this);
    }

    /// <summary>Field number for the "transaction_id" field.</summary>
    public const int TransactionIdFieldNumber = 1;
    private long transactionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionId {
      get { return transactionId_; }
      set {
        transactionId_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private global::EventStore.Client.Messages.OperationResult result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.Client.Messages.OperationResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 3;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionWriteCompleted);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionWriteCompleted other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionId != other.TransactionId) return false;
      if (Result != other.Result) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransactionId != 0L) hash ^= TransactionId.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransactionId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TransactionId);
      }
      if (Result != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Result);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransactionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TransactionId);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionWriteCompleted other) {
      if (other == null) {
        return;
      }
      if (other.TransactionId != 0L) {
        TransactionId = other.TransactionId;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TransactionId = input.ReadInt64();
            break;
          }
          case 16: {
            result_ = (global::EventStore.Client.Messages.OperationResult) input.ReadEnum();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransactionCommit : pb::IMessage<TransactionCommit> {
    private static readonly pb::MessageParser<TransactionCommit> _parser = new pb::MessageParser<TransactionCommit>(() => new TransactionCommit());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionCommit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.Client.Messages.MessagesReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionCommit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionCommit(TransactionCommit other) : this() {
      transactionId_ = other.transactionId_;
      requireMaster_ = other.requireMaster_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionCommit Clone() {
      return new TransactionCommit(this);
    }

    /// <summary>Field number for the "transaction_id" field.</summary>
    public const int TransactionIdFieldNumber = 1;
    private long transactionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionId {
      get { return transactionId_; }
      set {
        transactionId_ = value;
      }
    }

    /// <summary>Field number for the "require_master" field.</summary>
    public const int RequireMasterFieldNumber = 2;
    private bool requireMaster_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RequireMaster {
      get { return requireMaster_; }
      set {
        requireMaster_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionCommit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionCommit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionId != other.TransactionId) return false;
      if (RequireMaster != other.RequireMaster) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransactionId != 0L) hash ^= TransactionId.GetHashCode();
      if (RequireMaster != false) hash ^= RequireMaster.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransactionId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TransactionId);
      }
      if (RequireMaster != false) {
        output.WriteRawTag(16);
        output.WriteBool(RequireMaster);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransactionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TransactionId);
      }
      if (RequireMaster != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionCommit other) {
      if (other == null) {
        return;
      }
      if (other.TransactionId != 0L) {
        TransactionId = other.TransactionId;
      }
      if (other.RequireMaster != false) {
        RequireMaster = other.RequireMaster;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TransactionId = input.ReadInt64();
            break;
          }
          case 16: {
            RequireMaster = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransactionCommitCompleted : pb::IMessage<TransactionCommitCompleted> {
    private static readonly pb::MessageParser<TransactionCommitCompleted> _parser = new pb::MessageParser<TransactionCommitCompleted>(() => new TransactionCommitCompleted());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionCommitCompleted> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.Client.Messages.MessagesReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionCommitCompleted() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionCommitCompleted(TransactionCommitCompleted other) : this() {
      transactionId_ = other.transactionId_;
      result_ = other.result_;
      message_ = other.message_;
      firstEventNumber_ = other.firstEventNumber_;
      lastEventNumber_ = other.lastEventNumber_;
      preparePosition_ = other.preparePosition_;
      commitPosition_ = other.commitPosition_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionCommitCompleted Clone() {
      return new TransactionCommitCompleted(this);
    }

    /// <summary>Field number for the "transaction_id" field.</summary>
    public const int TransactionIdFieldNumber = 1;
    private long transactionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionId {
      get { return transactionId_; }
      set {
        transactionId_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private global::EventStore.Client.Messages.OperationResult result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.Client.Messages.OperationResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 3;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "first_event_number" field.</summary>
    public const int FirstEventNumberFieldNumber = 4;
    private long firstEventNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FirstEventNumber {
      get { return firstEventNumber_; }
      set {
        firstEventNumber_ = value;
      }
    }

    /// <summary>Field number for the "last_event_number" field.</summary>
    public const int LastEventNumberFieldNumber = 5;
    private long lastEventNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastEventNumber {
      get { return lastEventNumber_; }
      set {
        lastEventNumber_ = value;
      }
    }

    /// <summary>Field number for the "prepare_position" field.</summary>
    public const int PreparePositionFieldNumber = 6;
    private long preparePosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PreparePosition {
      get { return preparePosition_; }
      set {
        preparePosition_ = value;
      }
    }

    /// <summary>Field number for the "commit_position" field.</summary>
    public const int CommitPositionFieldNumber = 7;
    private long commitPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CommitPosition {
      get { return commitPosition_; }
      set {
        commitPosition_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionCommitCompleted);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionCommitCompleted other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionId != other.TransactionId) return false;
      if (Result != other.Result) return false;
      if (Message != other.Message) return false;
      if (FirstEventNumber != other.FirstEventNumber) return false;
      if (LastEventNumber != other.LastEventNumber) return false;
      if (PreparePosition != other.PreparePosition) return false;
      if (CommitPosition != other.CommitPosition) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransactionId != 0L) hash ^= TransactionId.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (FirstEventNumber != 0L) hash ^= FirstEventNumber.GetHashCode();
      if (LastEventNumber != 0L) hash ^= LastEventNumber.GetHashCode();
      if (PreparePosition != 0L) hash ^= PreparePosition.GetHashCode();
      if (CommitPosition != 0L) hash ^= CommitPosition.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransactionId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TransactionId);
      }
      if (Result != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Result);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (FirstEventNumber != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(FirstEventNumber);
      }
      if (LastEventNumber != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(LastEventNumber);
      }
      if (PreparePosition != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(PreparePosition);
      }
      if (CommitPosition != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(CommitPosition);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransactionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TransactionId);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (FirstEventNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FirstEventNumber);
      }
      if (LastEventNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastEventNumber);
      }
      if (PreparePosition != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PreparePosition);
      }
      if (CommitPosition != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CommitPosition);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionCommitCompleted other) {
      if (other == null) {
        return;
      }
      if (other.TransactionId != 0L) {
        TransactionId = other.TransactionId;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.FirstEventNumber != 0L) {
        FirstEventNumber = other.FirstEventNumber;
      }
      if (other.LastEventNumber != 0L) {
        LastEventNumber = other.LastEventNumber;
      }
      if (other.PreparePosition != 0L) {
        PreparePosition = other.PreparePosition;
      }
      if (other.CommitPosition != 0L) {
        CommitPosition = other.CommitPosition;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TransactionId = input.ReadInt64();
            break;
          }
          case 16: {
            result_ = (global::EventStore.Client.Messages.OperationResult) input.ReadEnum();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 32: {
            FirstEventNumber = input.ReadInt64();
            break;
          }
          case 40: {
            LastEventNumber = input.ReadInt64();
            break;
          }
          case 48: {
            PreparePosition = input.ReadInt64();
            break;
          }
          case 56: {
            CommitPosition = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReadEvent : pb::IMessage<ReadEvent> {
    private static readonly pb::MessageParser<ReadEvent> _parser = new pb::MessageParser<ReadEvent>(() => new ReadEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReadEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.Client.Messages.MessagesReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadEvent(ReadEvent other) : this() {
      eventStreamId_ = other.eventStreamId_;
      eventNumber_ = other.eventNumber_;
      resolveLinkTos_ = other.resolveLinkTos_;
      requireMaster_ = other.requireMaster_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadEvent Clone() {
      return new ReadEvent(this);
    }

    /// <summary>Field number for the "event_stream_id" field.</summary>
    public const int EventStreamIdFieldNumber = 1;
    private string eventStreamId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventStreamId {
      get { return eventStreamId_; }
      set {
        eventStreamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "event_number" field.</summary>
    public const int EventNumberFieldNumber = 2;
    private long eventNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EventNumber {
      get { return eventNumber_; }
      set {
        eventNumber_ = value;
      }
    }

    /// <summary>Field number for the "resolve_link_tos" field.</summary>
    public const int ResolveLinkTosFieldNumber = 3;
    private bool resolveLinkTos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ResolveLinkTos {
      get { return resolveLinkTos_; }
      set {
        resolveLinkTos_ = value;
      }
    }

    /// <summary>Field number for the "require_master" field.</summary>
    public const int RequireMasterFieldNumber = 4;
    private bool requireMaster_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RequireMaster {
      get { return requireMaster_; }
      set {
        requireMaster_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReadEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReadEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventStreamId != other.EventStreamId) return false;
      if (EventNumber != other.EventNumber) return false;
      if (ResolveLinkTos != other.ResolveLinkTos) return false;
      if (RequireMaster != other.RequireMaster) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventStreamId.Length != 0) hash ^= EventStreamId.GetHashCode();
      if (EventNumber != 0L) hash ^= EventNumber.GetHashCode();
      if (ResolveLinkTos != false) hash ^= ResolveLinkTos.GetHashCode();
      if (RequireMaster != false) hash ^= RequireMaster.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventStreamId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EventStreamId);
      }
      if (EventNumber != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(EventNumber);
      }
      if (ResolveLinkTos != false) {
        output.WriteRawTag(24);
        output.WriteBool(ResolveLinkTos);
      }
      if (RequireMaster != false) {
        output.WriteRawTag(32);
        output.WriteBool(RequireMaster);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventStreamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventStreamId);
      }
      if (EventNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EventNumber);
      }
      if (ResolveLinkTos != false) {
        size += 1 + 1;
      }
      if (RequireMaster != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReadEvent other) {
      if (other == null) {
        return;
      }
      if (other.EventStreamId.Length != 0) {
        EventStreamId = other.EventStreamId;
      }
      if (other.EventNumber != 0L) {
        EventNumber = other.EventNumber;
      }
      if (other.ResolveLinkTos != false) {
        ResolveLinkTos = other.ResolveLinkTos;
      }
      if (other.RequireMaster != false) {
        RequireMaster = other.RequireMaster;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            EventStreamId = input.ReadString();
            break;
          }
          case 16: {
            EventNumber = input.ReadInt64();
            break;
          }
          case 24: {
            ResolveLinkTos = input.ReadBool();
            break;
          }
          case 32: {
            RequireMaster = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReadEventCompleted : pb::IMessage<ReadEventCompleted> {
    private static readonly pb::MessageParser<ReadEventCompleted> _parser = new pb::MessageParser<ReadEventCompleted>(() => new ReadEventCompleted());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReadEventCompleted> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.Client.Messages.MessagesReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadEventCompleted() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadEventCompleted(ReadEventCompleted other) : this() {
      result_ = other.result_;
      Event = other.event_ != null ? other.Event.Clone() : null;
      error_ = other.error_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadEventCompleted Clone() {
      return new ReadEventCompleted(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::EventStore.Client.Messages.ReadEventCompleted.Types.ReadEventResult result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.Client.Messages.ReadEventCompleted.Types.ReadEventResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 2;
    private global::EventStore.Client.Messages.ResolvedIndexedEvent event_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.Client.Messages.ResolvedIndexedEvent Event {
      get { return event_; }
      set {
        event_ = value;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 3;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReadEventCompleted);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReadEventCompleted other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (!object.Equals(Event, other.Event)) return false;
      if (Error != other.Error) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (event_ != null) hash ^= Event.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (event_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Event);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (event_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Event);
      }
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReadEventCompleted other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.event_ != null) {
        if (event_ == null) {
          event_ = new global::EventStore.Client.Messages.ResolvedIndexedEvent();
        }
        Event.MergeFrom(other.Event);
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            result_ = (global::EventStore.Client.Messages.ReadEventCompleted.Types.ReadEventResult) input.ReadEnum();
            break;
          }
          case 18: {
            if (event_ == null) {
              event_ = new global::EventStore.Client.Messages.ResolvedIndexedEvent();
            }
            input.ReadMessage(event_);
            break;
          }
          case 26: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReadEventCompleted message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ReadEventResult {
        [pbr::OriginalName("Success")] Success = 0,
        [pbr::OriginalName("NotFound")] NotFound = 1,
        [pbr::OriginalName("NoStream")] NoStream = 2,
        [pbr::OriginalName("StreamDeleted")] StreamDeleted = 3,
        [pbr::OriginalName("Error")] Error = 4,
        [pbr::OriginalName("AccessDenied")] AccessDenied = 5,
      }

    }
    #endregion

  }

  public sealed partial class ReadStreamEvents : pb::IMessage<ReadStreamEvents> {
    private static readonly pb::MessageParser<ReadStreamEvents> _parser = new pb::MessageParser<ReadStreamEvents>(() => new ReadStreamEvents());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReadStreamEvents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.Client.Messages.MessagesReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadStreamEvents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadStreamEvents(ReadStreamEvents other) : this() {
      eventStreamId_ = other.eventStreamId_;
      fromEventNumber_ = other.fromEventNumber_;
      maxCount_ = other.maxCount_;
      resolveLinkTos_ = other.resolveLinkTos_;
      requireMaster_ = other.requireMaster_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadStreamEvents Clone() {
      return new ReadStreamEvents(this);
    }

    /// <summary>Field number for the "event_stream_id" field.</summary>
    public const int EventStreamIdFieldNumber = 1;
    private string eventStreamId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventStreamId {
      get { return eventStreamId_; }
      set {
        eventStreamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "from_event_number" field.</summary>
    public const int FromEventNumberFieldNumber = 2;
    private long fromEventNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FromEventNumber {
      get { return fromEventNumber_; }
      set {
        fromEventNumber_ = value;
      }
    }

    /// <summary>Field number for the "max_count" field.</summary>
    public const int MaxCountFieldNumber = 3;
    private int maxCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxCount {
      get { return maxCount_; }
      set {
        maxCount_ = value;
      }
    }

    /// <summary>Field number for the "resolve_link_tos" field.</summary>
    public const int ResolveLinkTosFieldNumber = 4;
    private bool resolveLinkTos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ResolveLinkTos {
      get { return resolveLinkTos_; }
      set {
        resolveLinkTos_ = value;
      }
    }

    /// <summary>Field number for the "require_master" field.</summary>
    public const int RequireMasterFieldNumber = 5;
    private bool requireMaster_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RequireMaster {
      get { return requireMaster_; }
      set {
        requireMaster_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReadStreamEvents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReadStreamEvents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventStreamId != other.EventStreamId) return false;
      if (FromEventNumber != other.FromEventNumber) return false;
      if (MaxCount != other.MaxCount) return false;
      if (ResolveLinkTos != other.ResolveLinkTos) return false;
      if (RequireMaster != other.RequireMaster) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventStreamId.Length != 0) hash ^= EventStreamId.GetHashCode();
      if (FromEventNumber != 0L) hash ^= FromEventNumber.GetHashCode();
      if (MaxCount != 0) hash ^= MaxCount.GetHashCode();
      if (ResolveLinkTos != false) hash ^= ResolveLinkTos.GetHashCode();
      if (RequireMaster != false) hash ^= RequireMaster.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventStreamId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EventStreamId);
      }
      if (FromEventNumber != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(FromEventNumber);
      }
      if (MaxCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxCount);
      }
      if (ResolveLinkTos != false) {
        output.WriteRawTag(32);
        output.WriteBool(ResolveLinkTos);
      }
      if (RequireMaster != false) {
        output.WriteRawTag(40);
        output.WriteBool(RequireMaster);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventStreamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventStreamId);
      }
      if (FromEventNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FromEventNumber);
      }
      if (MaxCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxCount);
      }
      if (ResolveLinkTos != false) {
        size += 1 + 1;
      }
      if (RequireMaster != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReadStreamEvents other) {
      if (other == null) {
        return;
      }
      if (other.EventStreamId.Length != 0) {
        EventStreamId = other.EventStreamId;
      }
      if (other.FromEventNumber != 0L) {
        FromEventNumber = other.FromEventNumber;
      }
      if (other.MaxCount != 0) {
        MaxCount = other.MaxCount;
      }
      if (other.ResolveLinkTos != false) {
        ResolveLinkTos = other.ResolveLinkTos;
      }
      if (other.RequireMaster != false) {
        RequireMaster = other.RequireMaster;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            EventStreamId = input.ReadString();
            break;
          }
          case 16: {
            FromEventNumber = input.ReadInt64();
            break;
          }
          case 24: {
            MaxCount = input.ReadInt32();
            break;
          }
          case 32: {
            ResolveLinkTos = input.ReadBool();
            break;
          }
          case 40: {
            RequireMaster = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReadStreamEventsCompleted : pb::IMessage<ReadStreamEventsCompleted> {
    private static readonly pb::MessageParser<ReadStreamEventsCompleted> _parser = new pb::MessageParser<ReadStreamEventsCompleted>(() => new ReadStreamEventsCompleted());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReadStreamEventsCompleted> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.Client.Messages.MessagesReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadStreamEventsCompleted() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadStreamEventsCompleted(ReadStreamEventsCompleted other) : this() {
      events_ = other.events_.Clone();
      result_ = other.result_;
      nextEventNumber_ = other.nextEventNumber_;
      lastEventNumber_ = other.lastEventNumber_;
      isEndOfStream_ = other.isEndOfStream_;
      lastCommitPosition_ = other.lastCommitPosition_;
      error_ = other.error_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadStreamEventsCompleted Clone() {
      return new ReadStreamEventsCompleted(this);
    }

    /// <summary>Field number for the "events" field.</summary>
    public const int EventsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::EventStore.Client.Messages.ResolvedIndexedEvent> _repeated_events_codec
        = pb::FieldCodec.ForMessage(10, global::EventStore.Client.Messages.ResolvedIndexedEvent.Parser);
    private readonly pbc::RepeatedField<global::EventStore.Client.Messages.ResolvedIndexedEvent> events_ = new pbc::RepeatedField<global::EventStore.Client.Messages.ResolvedIndexedEvent>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::EventStore.Client.Messages.ResolvedIndexedEvent> Events {
      get { return events_; }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private global::EventStore.Client.Messages.ReadStreamEventsCompleted.Types.ReadStreamResult result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.Client.Messages.ReadStreamEventsCompleted.Types.ReadStreamResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "next_event_number" field.</summary>
    public const int NextEventNumberFieldNumber = 3;
    private long nextEventNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NextEventNumber {
      get { return nextEventNumber_; }
      set {
        nextEventNumber_ = value;
      }
    }

    /// <summary>Field number for the "last_event_number" field.</summary>
    public const int LastEventNumberFieldNumber = 4;
    private long lastEventNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastEventNumber {
      get { return lastEventNumber_; }
      set {
        lastEventNumber_ = value;
      }
    }

    /// <summary>Field number for the "is_end_of_stream" field.</summary>
    public const int IsEndOfStreamFieldNumber = 5;
    private bool isEndOfStream_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEndOfStream {
      get { return isEndOfStream_; }
      set {
        isEndOfStream_ = value;
      }
    }

    /// <summary>Field number for the "last_commit_position" field.</summary>
    public const int LastCommitPositionFieldNumber = 6;
    private long lastCommitPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastCommitPosition {
      get { return lastCommitPosition_; }
      set {
        lastCommitPosition_ = value;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 7;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReadStreamEventsCompleted);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReadStreamEventsCompleted other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!events_.Equals(other.events_)) return false;
      if (Result != other.Result) return false;
      if (NextEventNumber != other.NextEventNumber) return false;
      if (LastEventNumber != other.LastEventNumber) return false;
      if (IsEndOfStream != other.IsEndOfStream) return false;
      if (LastCommitPosition != other.LastCommitPosition) return false;
      if (Error != other.Error) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= events_.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      if (NextEventNumber != 0L) hash ^= NextEventNumber.GetHashCode();
      if (LastEventNumber != 0L) hash ^= LastEventNumber.GetHashCode();
      if (IsEndOfStream != false) hash ^= IsEndOfStream.GetHashCode();
      if (LastCommitPosition != 0L) hash ^= LastCommitPosition.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      events_.WriteTo(output, _repeated_events_codec);
      if (Result != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Result);
      }
      if (NextEventNumber != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(NextEventNumber);
      }
      if (LastEventNumber != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(LastEventNumber);
      }
      if (IsEndOfStream != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsEndOfStream);
      }
      if (LastCommitPosition != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(LastCommitPosition);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += events_.CalculateSize(_repeated_events_codec);
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (NextEventNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NextEventNumber);
      }
      if (LastEventNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastEventNumber);
      }
      if (IsEndOfStream != false) {
        size += 1 + 1;
      }
      if (LastCommitPosition != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastCommitPosition);
      }
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReadStreamEventsCompleted other) {
      if (other == null) {
        return;
      }
      events_.Add(other.events_);
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.NextEventNumber != 0L) {
        NextEventNumber = other.NextEventNumber;
      }
      if (other.LastEventNumber != 0L) {
        LastEventNumber = other.LastEventNumber;
      }
      if (other.IsEndOfStream != false) {
        IsEndOfStream = other.IsEndOfStream;
      }
      if (other.LastCommitPosition != 0L) {
        LastCommitPosition = other.LastCommitPosition;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            events_.AddEntriesFrom(input, _repeated_events_codec);
            break;
          }
          case 16: {
            result_ = (global::EventStore.Client.Messages.ReadStreamEventsCompleted.Types.ReadStreamResult) input.ReadEnum();
            break;
          }
          case 24: {
            NextEventNumber = input.ReadInt64();
            break;
          }
          case 32: {
            LastEventNumber = input.ReadInt64();
            break;
          }
          case 40: {
            IsEndOfStream = input.ReadBool();
            break;
          }
          case 48: {
            LastCommitPosition = input.ReadInt64();
            break;
          }
          case 58: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReadStreamEventsCompleted message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ReadStreamResult {
        [pbr::OriginalName("Success")] Success = 0,
        [pbr::OriginalName("NoStream")] NoStream = 1,
        [pbr::OriginalName("StreamDeleted")] StreamDeleted = 2,
        [pbr::OriginalName("NotModified")] NotModified = 3,
        [pbr::OriginalName("Error")] Error = 4,
        [pbr::OriginalName("AccessDenied")] AccessDenied = 5,
      }

    }
    #endregion

  }

  public sealed partial class ReadAllEvents : pb::IMessage<ReadAllEvents> {
    private static readonly pb::MessageParser<ReadAllEvents> _parser = new pb::MessageParser<ReadAllEvents>(() => new ReadAllEvents());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReadAllEvents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.Client.Messages.MessagesReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadAllEvents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadAllEvents(ReadAllEvents other) : this() {
      commitPosition_ = other.commitPosition_;
      preparePosition_ = other.preparePosition_;
      maxCount_ = other.maxCount_;
      resolveLinkTos_ = other.resolveLinkTos_;
      requireMaster_ = other.requireMaster_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadAllEvents Clone() {
      return new ReadAllEvents(this);
    }

    /// <summary>Field number for the "commit_position" field.</summary>
    public const int CommitPositionFieldNumber = 1;
    private long commitPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CommitPosition {
      get { return commitPosition_; }
      set {
        commitPosition_ = value;
      }
    }

    /// <summary>Field number for the "prepare_position" field.</summary>
    public const int PreparePositionFieldNumber = 2;
    private long preparePosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PreparePosition {
      get { return preparePosition_; }
      set {
        preparePosition_ = value;
      }
    }

    /// <summary>Field number for the "max_count" field.</summary>
    public const int MaxCountFieldNumber = 3;
    private int maxCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxCount {
      get { return maxCount_; }
      set {
        maxCount_ = value;
      }
    }

    /// <summary>Field number for the "resolve_link_tos" field.</summary>
    public const int ResolveLinkTosFieldNumber = 4;
    private bool resolveLinkTos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ResolveLinkTos {
      get { return resolveLinkTos_; }
      set {
        resolveLinkTos_ = value;
      }
    }

    /// <summary>Field number for the "require_master" field.</summary>
    public const int RequireMasterFieldNumber = 5;
    private bool requireMaster_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RequireMaster {
      get { return requireMaster_; }
      set {
        requireMaster_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReadAllEvents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReadAllEvents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CommitPosition != other.CommitPosition) return false;
      if (PreparePosition != other.PreparePosition) return false;
      if (MaxCount != other.MaxCount) return false;
      if (ResolveLinkTos != other.ResolveLinkTos) return false;
      if (RequireMaster != other.RequireMaster) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CommitPosition != 0L) hash ^= CommitPosition.GetHashCode();
      if (PreparePosition != 0L) hash ^= PreparePosition.GetHashCode();
      if (MaxCount != 0) hash ^= MaxCount.GetHashCode();
      if (ResolveLinkTos != false) hash ^= ResolveLinkTos.GetHashCode();
      if (RequireMaster != false) hash ^= RequireMaster.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CommitPosition != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CommitPosition);
      }
      if (PreparePosition != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PreparePosition);
      }
      if (MaxCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxCount);
      }
      if (ResolveLinkTos != false) {
        output.WriteRawTag(32);
        output.WriteBool(ResolveLinkTos);
      }
      if (RequireMaster != false) {
        output.WriteRawTag(40);
        output.WriteBool(RequireMaster);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CommitPosition != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CommitPosition);
      }
      if (PreparePosition != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PreparePosition);
      }
      if (MaxCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxCount);
      }
      if (ResolveLinkTos != false) {
        size += 1 + 1;
      }
      if (RequireMaster != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReadAllEvents other) {
      if (other == null) {
        return;
      }
      if (other.CommitPosition != 0L) {
        CommitPosition = other.CommitPosition;
      }
      if (other.PreparePosition != 0L) {
        PreparePosition = other.PreparePosition;
      }
      if (other.MaxCount != 0) {
        MaxCount = other.MaxCount;
      }
      if (other.ResolveLinkTos != false) {
        ResolveLinkTos = other.ResolveLinkTos;
      }
      if (other.RequireMaster != false) {
        RequireMaster = other.RequireMaster;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CommitPosition = input.ReadInt64();
            break;
          }
          case 16: {
            PreparePosition = input.ReadInt64();
            break;
          }
          case 24: {
            MaxCount = input.ReadInt32();
            break;
          }
          case 32: {
            ResolveLinkTos = input.ReadBool();
            break;
          }
          case 40: {
            RequireMaster = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReadAllEventsCompleted : pb::IMessage<ReadAllEventsCompleted> {
    private static readonly pb::MessageParser<ReadAllEventsCompleted> _parser = new pb::MessageParser<ReadAllEventsCompleted>(() => new ReadAllEventsCompleted());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReadAllEventsCompleted> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.Client.Messages.MessagesReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadAllEventsCompleted() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadAllEventsCompleted(ReadAllEventsCompleted other) : this() {
      commitPosition_ = other.commitPosition_;
      preparePosition_ = other.preparePosition_;
      events_ = other.events_.Clone();
      nextCommitPosition_ = other.nextCommitPosition_;
      nextPreparePosition_ = other.nextPreparePosition_;
      result_ = other.result_;
      error_ = other.error_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadAllEventsCompleted Clone() {
      return new ReadAllEventsCompleted(this);
    }

    /// <summary>Field number for the "commit_position" field.</summary>
    public const int CommitPositionFieldNumber = 1;
    private long commitPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CommitPosition {
      get { return commitPosition_; }
      set {
        commitPosition_ = value;
      }
    }

    /// <summary>Field number for the "prepare_position" field.</summary>
    public const int PreparePositionFieldNumber = 2;
    private long preparePosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PreparePosition {
      get { return preparePosition_; }
      set {
        preparePosition_ = value;
      }
    }

    /// <summary>Field number for the "events" field.</summary>
    public const int EventsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::EventStore.Client.Messages.ResolvedEvent> _repeated_events_codec
        = pb::FieldCodec.ForMessage(26, global::EventStore.Client.Messages.ResolvedEvent.Parser);
    private readonly pbc::RepeatedField<global::EventStore.Client.Messages.ResolvedEvent> events_ = new pbc::RepeatedField<global::EventStore.Client.Messages.ResolvedEvent>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::EventStore.Client.Messages.ResolvedEvent> Events {
      get { return events_; }
    }

    /// <summary>Field number for the "next_commit_position" field.</summary>
    public const int NextCommitPositionFieldNumber = 4;
    private long nextCommitPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NextCommitPosition {
      get { return nextCommitPosition_; }
      set {
        nextCommitPosition_ = value;
      }
    }

    /// <summary>Field number for the "next_prepare_position" field.</summary>
    public const int NextPreparePositionFieldNumber = 5;
    private long nextPreparePosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NextPreparePosition {
      get { return nextPreparePosition_; }
      set {
        nextPreparePosition_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 6;
    private global::EventStore.Client.Messages.ReadAllEventsCompleted.Types.ReadAllResult result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.Client.Messages.ReadAllEventsCompleted.Types.ReadAllResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 7;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReadAllEventsCompleted);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReadAllEventsCompleted other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CommitPosition != other.CommitPosition) return false;
      if (PreparePosition != other.PreparePosition) return false;
      if(!events_.Equals(other.events_)) return false;
      if (NextCommitPosition != other.NextCommitPosition) return false;
      if (NextPreparePosition != other.NextPreparePosition) return false;
      if (Result != other.Result) return false;
      if (Error != other.Error) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CommitPosition != 0L) hash ^= CommitPosition.GetHashCode();
      if (PreparePosition != 0L) hash ^= PreparePosition.GetHashCode();
      hash ^= events_.GetHashCode();
      if (NextCommitPosition != 0L) hash ^= NextCommitPosition.GetHashCode();
      if (NextPreparePosition != 0L) hash ^= NextPreparePosition.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CommitPosition != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CommitPosition);
      }
      if (PreparePosition != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PreparePosition);
      }
      events_.WriteTo(output, _repeated_events_codec);
      if (NextCommitPosition != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(NextCommitPosition);
      }
      if (NextPreparePosition != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(NextPreparePosition);
      }
      if (Result != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Result);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CommitPosition != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CommitPosition);
      }
      if (PreparePosition != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PreparePosition);
      }
      size += events_.CalculateSize(_repeated_events_codec);
      if (NextCommitPosition != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NextCommitPosition);
      }
      if (NextPreparePosition != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NextPreparePosition);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReadAllEventsCompleted other) {
      if (other == null) {
        return;
      }
      if (other.CommitPosition != 0L) {
        CommitPosition = other.CommitPosition;
      }
      if (other.PreparePosition != 0L) {
        PreparePosition = other.PreparePosition;
      }
      events_.Add(other.events_);
      if (other.NextCommitPosition != 0L) {
        NextCommitPosition = other.NextCommitPosition;
      }
      if (other.NextPreparePosition != 0L) {
        NextPreparePosition = other.NextPreparePosition;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CommitPosition = input.ReadInt64();
            break;
          }
          case 16: {
            PreparePosition = input.ReadInt64();
            break;
          }
          case 26: {
            events_.AddEntriesFrom(input, _repeated_events_codec);
            break;
          }
          case 32: {
            NextCommitPosition = input.ReadInt64();
            break;
          }
          case 40: {
            NextPreparePosition = input.ReadInt64();
            break;
          }
          case 48: {
            result_ = (global::EventStore.Client.Messages.ReadAllEventsCompleted.Types.ReadAllResult) input.ReadEnum();
            break;
          }
          case 58: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReadAllEventsCompleted message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ReadAllResult {
        [pbr::OriginalName("Success")] Success = 0,
        [pbr::OriginalName("NotModified")] NotModified = 1,
        [pbr::OriginalName("Error")] Error = 2,
        [pbr::OriginalName("AccessDenied")] AccessDenied = 3,
      }

    }
    #endregion

  }

  public sealed partial class CreatePersistentSubscription : pb::IMessage<CreatePersistentSubscription> {
    private static readonly pb::MessageParser<CreatePersistentSubscription> _parser = new pb::MessageParser<CreatePersistentSubscription>(() => new CreatePersistentSubscription());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreatePersistentSubscription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.Client.Messages.MessagesReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatePersistentSubscription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatePersistentSubscription(CreatePersistentSubscription other) : this() {
      subscriptionGroupName_ = other.subscriptionGroupName_;
      eventStreamId_ = other.eventStreamId_;
      resolveLinkTos_ = other.resolveLinkTos_;
      startFrom_ = other.startFrom_;
      messageTimeoutMilliseconds_ = other.messageTimeoutMilliseconds_;
      recordStatistics_ = other.recordStatistics_;
      liveBufferSize_ = other.liveBufferSize_;
      readBatchSize_ = other.readBatchSize_;
      bufferSize_ = other.bufferSize_;
      maxRetryCount_ = other.maxRetryCount_;
      preferRoundRobin_ = other.preferRoundRobin_;
      checkpointAfterTime_ = other.checkpointAfterTime_;
      checkpointMaxCount_ = other.checkpointMaxCount_;
      checkpointMinCount_ = other.checkpointMinCount_;
      subscriberMaxCount_ = other.subscriberMaxCount_;
      namedConsumerStrategy_ = other.namedConsumerStrategy_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatePersistentSubscription Clone() {
      return new CreatePersistentSubscription(this);
    }

    /// <summary>Field number for the "subscription_group_name" field.</summary>
    public const int SubscriptionGroupNameFieldNumber = 1;
    private string subscriptionGroupName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubscriptionGroupName {
      get { return subscriptionGroupName_; }
      set {
        subscriptionGroupName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "event_stream_id" field.</summary>
    public const int EventStreamIdFieldNumber = 2;
    private string eventStreamId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventStreamId {
      get { return eventStreamId_; }
      set {
        eventStreamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resolve_link_tos" field.</summary>
    public const int ResolveLinkTosFieldNumber = 3;
    private bool resolveLinkTos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ResolveLinkTos {
      get { return resolveLinkTos_; }
      set {
        resolveLinkTos_ = value;
      }
    }

    /// <summary>Field number for the "start_from" field.</summary>
    public const int StartFromFieldNumber = 4;
    private long startFrom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartFrom {
      get { return startFrom_; }
      set {
        startFrom_ = value;
      }
    }

    /// <summary>Field number for the "message_timeout_milliseconds" field.</summary>
    public const int MessageTimeoutMillisecondsFieldNumber = 5;
    private int messageTimeoutMilliseconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MessageTimeoutMilliseconds {
      get { return messageTimeoutMilliseconds_; }
      set {
        messageTimeoutMilliseconds_ = value;
      }
    }

    /// <summary>Field number for the "record_statistics" field.</summary>
    public const int RecordStatisticsFieldNumber = 6;
    private bool recordStatistics_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RecordStatistics {
      get { return recordStatistics_; }
      set {
        recordStatistics_ = value;
      }
    }

    /// <summary>Field number for the "live_buffer_size" field.</summary>
    public const int LiveBufferSizeFieldNumber = 7;
    private int liveBufferSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LiveBufferSize {
      get { return liveBufferSize_; }
      set {
        liveBufferSize_ = value;
      }
    }

    /// <summary>Field number for the "read_batch_size" field.</summary>
    public const int ReadBatchSizeFieldNumber = 8;
    private int readBatchSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReadBatchSize {
      get { return readBatchSize_; }
      set {
        readBatchSize_ = value;
      }
    }

    /// <summary>Field number for the "buffer_size" field.</summary>
    public const int BufferSizeFieldNumber = 9;
    private int bufferSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BufferSize {
      get { return bufferSize_; }
      set {
        bufferSize_ = value;
      }
    }

    /// <summary>Field number for the "max_retry_count" field.</summary>
    public const int MaxRetryCountFieldNumber = 10;
    private int maxRetryCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxRetryCount {
      get { return maxRetryCount_; }
      set {
        maxRetryCount_ = value;
      }
    }

    /// <summary>Field number for the "prefer_round_robin" field.</summary>
    public const int PreferRoundRobinFieldNumber = 11;
    private bool preferRoundRobin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PreferRoundRobin {
      get { return preferRoundRobin_; }
      set {
        preferRoundRobin_ = value;
      }
    }

    /// <summary>Field number for the "checkpoint_after_time" field.</summary>
    public const int CheckpointAfterTimeFieldNumber = 12;
    private int checkpointAfterTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CheckpointAfterTime {
      get { return checkpointAfterTime_; }
      set {
        checkpointAfterTime_ = value;
      }
    }

    /// <summary>Field number for the "checkpoint_max_count" field.</summary>
    public const int CheckpointMaxCountFieldNumber = 13;
    private int checkpointMaxCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CheckpointMaxCount {
      get { return checkpointMaxCount_; }
      set {
        checkpointMaxCount_ = value;
      }
    }

    /// <summary>Field number for the "checkpoint_min_count" field.</summary>
    public const int CheckpointMinCountFieldNumber = 14;
    private int checkpointMinCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CheckpointMinCount {
      get { return checkpointMinCount_; }
      set {
        checkpointMinCount_ = value;
      }
    }

    /// <summary>Field number for the "subscriber_max_count" field.</summary>
    public const int SubscriberMaxCountFieldNumber = 15;
    private int subscriberMaxCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubscriberMaxCount {
      get { return subscriberMaxCount_; }
      set {
        subscriberMaxCount_ = value;
      }
    }

    /// <summary>Field number for the "named_consumer_strategy" field.</summary>
    public const int NamedConsumerStrategyFieldNumber = 16;
    private string namedConsumerStrategy_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NamedConsumerStrategy {
      get { return namedConsumerStrategy_; }
      set {
        namedConsumerStrategy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreatePersistentSubscription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreatePersistentSubscription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SubscriptionGroupName != other.SubscriptionGroupName) return false;
      if (EventStreamId != other.EventStreamId) return false;
      if (ResolveLinkTos != other.ResolveLinkTos) return false;
      if (StartFrom != other.StartFrom) return false;
      if (MessageTimeoutMilliseconds != other.MessageTimeoutMilliseconds) return false;
      if (RecordStatistics != other.RecordStatistics) return false;
      if (LiveBufferSize != other.LiveBufferSize) return false;
      if (ReadBatchSize != other.ReadBatchSize) return false;
      if (BufferSize != other.BufferSize) return false;
      if (MaxRetryCount != other.MaxRetryCount) return false;
      if (PreferRoundRobin != other.PreferRoundRobin) return false;
      if (CheckpointAfterTime != other.CheckpointAfterTime) return false;
      if (CheckpointMaxCount != other.CheckpointMaxCount) return false;
      if (CheckpointMinCount != other.CheckpointMinCount) return false;
      if (SubscriberMaxCount != other.SubscriberMaxCount) return false;
      if (NamedConsumerStrategy != other.NamedConsumerStrategy) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SubscriptionGroupName.Length != 0) hash ^= SubscriptionGroupName.GetHashCode();
      if (EventStreamId.Length != 0) hash ^= EventStreamId.GetHashCode();
      if (ResolveLinkTos != false) hash ^= ResolveLinkTos.GetHashCode();
      if (StartFrom != 0L) hash ^= StartFrom.GetHashCode();
      if (MessageTimeoutMilliseconds != 0) hash ^= MessageTimeoutMilliseconds.GetHashCode();
      if (RecordStatistics != false) hash ^= RecordStatistics.GetHashCode();
      if (LiveBufferSize != 0) hash ^= LiveBufferSize.GetHashCode();
      if (ReadBatchSize != 0) hash ^= ReadBatchSize.GetHashCode();
      if (BufferSize != 0) hash ^= BufferSize.GetHashCode();
      if (MaxRetryCount != 0) hash ^= MaxRetryCount.GetHashCode();
      if (PreferRoundRobin != false) hash ^= PreferRoundRobin.GetHashCode();
      if (CheckpointAfterTime != 0) hash ^= CheckpointAfterTime.GetHashCode();
      if (CheckpointMaxCount != 0) hash ^= CheckpointMaxCount.GetHashCode();
      if (CheckpointMinCount != 0) hash ^= CheckpointMinCount.GetHashCode();
      if (SubscriberMaxCount != 0) hash ^= SubscriberMaxCount.GetHashCode();
      if (NamedConsumerStrategy.Length != 0) hash ^= NamedConsumerStrategy.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SubscriptionGroupName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SubscriptionGroupName);
      }
      if (EventStreamId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EventStreamId);
      }
      if (ResolveLinkTos != false) {
        output.WriteRawTag(24);
        output.WriteBool(ResolveLinkTos);
      }
      if (StartFrom != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(StartFrom);
      }
      if (MessageTimeoutMilliseconds != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MessageTimeoutMilliseconds);
      }
      if (RecordStatistics != false) {
        output.WriteRawTag(48);
        output.WriteBool(RecordStatistics);
      }
      if (LiveBufferSize != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(LiveBufferSize);
      }
      if (ReadBatchSize != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ReadBatchSize);
      }
      if (BufferSize != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(BufferSize);
      }
      if (MaxRetryCount != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MaxRetryCount);
      }
      if (PreferRoundRobin != false) {
        output.WriteRawTag(88);
        output.WriteBool(PreferRoundRobin);
      }
      if (CheckpointAfterTime != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(CheckpointAfterTime);
      }
      if (CheckpointMaxCount != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(CheckpointMaxCount);
      }
      if (CheckpointMinCount != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(CheckpointMinCount);
      }
      if (SubscriberMaxCount != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(SubscriberMaxCount);
      }
      if (NamedConsumerStrategy.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(NamedConsumerStrategy);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SubscriptionGroupName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubscriptionGroupName);
      }
      if (EventStreamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventStreamId);
      }
      if (ResolveLinkTos != false) {
        size += 1 + 1;
      }
      if (StartFrom != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartFrom);
      }
      if (MessageTimeoutMilliseconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MessageTimeoutMilliseconds);
      }
      if (RecordStatistics != false) {
        size += 1 + 1;
      }
      if (LiveBufferSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LiveBufferSize);
      }
      if (ReadBatchSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReadBatchSize);
      }
      if (BufferSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BufferSize);
      }
      if (MaxRetryCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxRetryCount);
      }
      if (PreferRoundRobin != false) {
        size += 1 + 1;
      }
      if (CheckpointAfterTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CheckpointAfterTime);
      }
      if (CheckpointMaxCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CheckpointMaxCount);
      }
      if (CheckpointMinCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CheckpointMinCount);
      }
      if (SubscriberMaxCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubscriberMaxCount);
      }
      if (NamedConsumerStrategy.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(NamedConsumerStrategy);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreatePersistentSubscription other) {
      if (other == null) {
        return;
      }
      if (other.SubscriptionGroupName.Length != 0) {
        SubscriptionGroupName = other.SubscriptionGroupName;
      }
      if (other.EventStreamId.Length != 0) {
        EventStreamId = other.EventStreamId;
      }
      if (other.ResolveLinkTos != false) {
        ResolveLinkTos = other.ResolveLinkTos;
      }
      if (other.StartFrom != 0L) {
        StartFrom = other.StartFrom;
      }
      if (other.MessageTimeoutMilliseconds != 0) {
        MessageTimeoutMilliseconds = other.MessageTimeoutMilliseconds;
      }
      if (other.RecordStatistics != false) {
        RecordStatistics = other.RecordStatistics;
      }
      if (other.LiveBufferSize != 0) {
        LiveBufferSize = other.LiveBufferSize;
      }
      if (other.ReadBatchSize != 0) {
        ReadBatchSize = other.ReadBatchSize;
      }
      if (other.BufferSize != 0) {
        BufferSize = other.BufferSize;
      }
      if (other.MaxRetryCount != 0) {
        MaxRetryCount = other.MaxRetryCount;
      }
      if (other.PreferRoundRobin != false) {
        PreferRoundRobin = other.PreferRoundRobin;
      }
      if (other.CheckpointAfterTime != 0) {
        CheckpointAfterTime = other.CheckpointAfterTime;
      }
      if (other.CheckpointMaxCount != 0) {
        CheckpointMaxCount = other.CheckpointMaxCount;
      }
      if (other.CheckpointMinCount != 0) {
        CheckpointMinCount = other.CheckpointMinCount;
      }
      if (other.SubscriberMaxCount != 0) {
        SubscriberMaxCount = other.SubscriberMaxCount;
      }
      if (other.NamedConsumerStrategy.Length != 0) {
        NamedConsumerStrategy = other.NamedConsumerStrategy;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SubscriptionGroupName = input.ReadString();
            break;
          }
          case 18: {
            EventStreamId = input.ReadString();
            break;
          }
          case 24: {
            ResolveLinkTos = input.ReadBool();
            break;
          }
          case 32: {
            StartFrom = input.ReadInt64();
            break;
          }
          case 40: {
            MessageTimeoutMilliseconds = input.ReadInt32();
            break;
          }
          case 48: {
            RecordStatistics = input.ReadBool();
            break;
          }
          case 56: {
            LiveBufferSize = input.ReadInt32();
            break;
          }
          case 64: {
            ReadBatchSize = input.ReadInt32();
            break;
          }
          case 72: {
            BufferSize = input.ReadInt32();
            break;
          }
          case 80: {
            MaxRetryCount = input.ReadInt32();
            break;
          }
          case 88: {
            PreferRoundRobin = input.ReadBool();
            break;
          }
          case 96: {
            CheckpointAfterTime = input.ReadInt32();
            break;
          }
          case 104: {
            CheckpointMaxCount = input.ReadInt32();
            break;
          }
          case 112: {
            CheckpointMinCount = input.ReadInt32();
            break;
          }
          case 120: {
            SubscriberMaxCount = input.ReadInt32();
            break;
          }
          case 130: {
            NamedConsumerStrategy = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeletePersistentSubscription : pb::IMessage<DeletePersistentSubscription> {
    private static readonly pb::MessageParser<DeletePersistentSubscription> _parser = new pb::MessageParser<DeletePersistentSubscription>(() => new DeletePersistentSubscription());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeletePersistentSubscription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.Client.Messages.MessagesReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeletePersistentSubscription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeletePersistentSubscription(DeletePersistentSubscription other) : this() {
      subscriptionGroupName_ = other.subscriptionGroupName_;
      eventStreamId_ = other.eventStreamId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeletePersistentSubscription Clone() {
      return new DeletePersistentSubscription(this);
    }

    /// <summary>Field number for the "subscription_group_name" field.</summary>
    public const int SubscriptionGroupNameFieldNumber = 1;
    private string subscriptionGroupName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubscriptionGroupName {
      get { return subscriptionGroupName_; }
      set {
        subscriptionGroupName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "event_stream_id" field.</summary>
    public const int EventStreamIdFieldNumber = 2;
    private string eventStreamId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventStreamId {
      get { return eventStreamId_; }
      set {
        eventStreamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeletePersistentSubscription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeletePersistentSubscription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SubscriptionGroupName != other.SubscriptionGroupName) return false;
      if (EventStreamId != other.EventStreamId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SubscriptionGroupName.Length != 0) hash ^= SubscriptionGroupName.GetHashCode();
      if (EventStreamId.Length != 0) hash ^= EventStreamId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SubscriptionGroupName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SubscriptionGroupName);
      }
      if (EventStreamId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EventStreamId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SubscriptionGroupName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubscriptionGroupName);
      }
      if (EventStreamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventStreamId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeletePersistentSubscription other) {
      if (other == null) {
        return;
      }
      if (other.SubscriptionGroupName.Length != 0) {
        SubscriptionGroupName = other.SubscriptionGroupName;
      }
      if (other.EventStreamId.Length != 0) {
        EventStreamId = other.EventStreamId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SubscriptionGroupName = input.ReadString();
            break;
          }
          case 18: {
            EventStreamId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdatePersistentSubscription : pb::IMessage<UpdatePersistentSubscription> {
    private static readonly pb::MessageParser<UpdatePersistentSubscription> _parser = new pb::MessageParser<UpdatePersistentSubscription>(() => new UpdatePersistentSubscription());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdatePersistentSubscription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.Client.Messages.MessagesReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePersistentSubscription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePersistentSubscription(UpdatePersistentSubscription other) : this() {
      subscriptionGroupName_ = other.subscriptionGroupName_;
      eventStreamId_ = other.eventStreamId_;
      resolveLinkTos_ = other.resolveLinkTos_;
      startFrom_ = other.startFrom_;
      messageTimeoutMilliseconds_ = other.messageTimeoutMilliseconds_;
      recordStatistics_ = other.recordStatistics_;
      liveBufferSize_ = other.liveBufferSize_;
      readBatchSize_ = other.readBatchSize_;
      bufferSize_ = other.bufferSize_;
      maxRetryCount_ = other.maxRetryCount_;
      preferRoundRobin_ = other.preferRoundRobin_;
      checkpointAfterTime_ = other.checkpointAfterTime_;
      checkpointMaxCount_ = other.checkpointMaxCount_;
      checkpointMinCount_ = other.checkpointMinCount_;
      subscriberMaxCount_ = other.subscriberMaxCount_;
      namedConsumerStrategy_ = other.namedConsumerStrategy_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePersistentSubscription Clone() {
      return new UpdatePersistentSubscription(this);
    }

    /// <summary>Field number for the "subscription_group_name" field.</summary>
    public const int SubscriptionGroupNameFieldNumber = 1;
    private string subscriptionGroupName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubscriptionGroupName {
      get { return subscriptionGroupName_; }
      set {
        subscriptionGroupName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "event_stream_id" field.</summary>
    public const int EventStreamIdFieldNumber = 2;
    private string eventStreamId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventStreamId {
      get { return eventStreamId_; }
      set {
        eventStreamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resolve_link_tos" field.</summary>
    public const int ResolveLinkTosFieldNumber = 3;
    private bool resolveLinkTos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ResolveLinkTos {
      get { return resolveLinkTos_; }
      set {
        resolveLinkTos_ = value;
      }
    }

    /// <summary>Field number for the "start_from" field.</summary>
    public const int StartFromFieldNumber = 4;
    private long startFrom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartFrom {
      get { return startFrom_; }
      set {
        startFrom_ = value;
      }
    }

    /// <summary>Field number for the "message_timeout_milliseconds" field.</summary>
    public const int MessageTimeoutMillisecondsFieldNumber = 5;
    private int messageTimeoutMilliseconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MessageTimeoutMilliseconds {
      get { return messageTimeoutMilliseconds_; }
      set {
        messageTimeoutMilliseconds_ = value;
      }
    }

    /// <summary>Field number for the "record_statistics" field.</summary>
    public const int RecordStatisticsFieldNumber = 6;
    private bool recordStatistics_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RecordStatistics {
      get { return recordStatistics_; }
      set {
        recordStatistics_ = value;
      }
    }

    /// <summary>Field number for the "live_buffer_size" field.</summary>
    public const int LiveBufferSizeFieldNumber = 7;
    private int liveBufferSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LiveBufferSize {
      get { return liveBufferSize_; }
      set {
        liveBufferSize_ = value;
      }
    }

    /// <summary>Field number for the "read_batch_size" field.</summary>
    public const int ReadBatchSizeFieldNumber = 8;
    private int readBatchSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReadBatchSize {
      get { return readBatchSize_; }
      set {
        readBatchSize_ = value;
      }
    }

    /// <summary>Field number for the "buffer_size" field.</summary>
    public const int BufferSizeFieldNumber = 9;
    private int bufferSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BufferSize {
      get { return bufferSize_; }
      set {
        bufferSize_ = value;
      }
    }

    /// <summary>Field number for the "max_retry_count" field.</summary>
    public const int MaxRetryCountFieldNumber = 10;
    private int maxRetryCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxRetryCount {
      get { return maxRetryCount_; }
      set {
        maxRetryCount_ = value;
      }
    }

    /// <summary>Field number for the "prefer_round_robin" field.</summary>
    public const int PreferRoundRobinFieldNumber = 11;
    private bool preferRoundRobin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PreferRoundRobin {
      get { return preferRoundRobin_; }
      set {
        preferRoundRobin_ = value;
      }
    }

    /// <summary>Field number for the "checkpoint_after_time" field.</summary>
    public const int CheckpointAfterTimeFieldNumber = 12;
    private int checkpointAfterTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CheckpointAfterTime {
      get { return checkpointAfterTime_; }
      set {
        checkpointAfterTime_ = value;
      }
    }

    /// <summary>Field number for the "checkpoint_max_count" field.</summary>
    public const int CheckpointMaxCountFieldNumber = 13;
    private int checkpointMaxCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CheckpointMaxCount {
      get { return checkpointMaxCount_; }
      set {
        checkpointMaxCount_ = value;
      }
    }

    /// <summary>Field number for the "checkpoint_min_count" field.</summary>
    public const int CheckpointMinCountFieldNumber = 14;
    private int checkpointMinCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CheckpointMinCount {
      get { return checkpointMinCount_; }
      set {
        checkpointMinCount_ = value;
      }
    }

    /// <summary>Field number for the "subscriber_max_count" field.</summary>
    public const int SubscriberMaxCountFieldNumber = 15;
    private int subscriberMaxCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubscriberMaxCount {
      get { return subscriberMaxCount_; }
      set {
        subscriberMaxCount_ = value;
      }
    }

    /// <summary>Field number for the "named_consumer_strategy" field.</summary>
    public const int NamedConsumerStrategyFieldNumber = 16;
    private string namedConsumerStrategy_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NamedConsumerStrategy {
      get { return namedConsumerStrategy_; }
      set {
        namedConsumerStrategy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdatePersistentSubscription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdatePersistentSubscription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SubscriptionGroupName != other.SubscriptionGroupName) return false;
      if (EventStreamId != other.EventStreamId) return false;
      if (ResolveLinkTos != other.ResolveLinkTos) return false;
      if (StartFrom != other.StartFrom) return false;
      if (MessageTimeoutMilliseconds != other.MessageTimeoutMilliseconds) return false;
      if (RecordStatistics != other.RecordStatistics) return false;
      if (LiveBufferSize != other.LiveBufferSize) return false;
      if (ReadBatchSize != other.ReadBatchSize) return false;
      if (BufferSize != other.BufferSize) return false;
      if (MaxRetryCount != other.MaxRetryCount) return false;
      if (PreferRoundRobin != other.PreferRoundRobin) return false;
      if (CheckpointAfterTime != other.CheckpointAfterTime) return false;
      if (CheckpointMaxCount != other.CheckpointMaxCount) return false;
      if (CheckpointMinCount != other.CheckpointMinCount) return false;
      if (SubscriberMaxCount != other.SubscriberMaxCount) return false;
      if (NamedConsumerStrategy != other.NamedConsumerStrategy) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SubscriptionGroupName.Length != 0) hash ^= SubscriptionGroupName.GetHashCode();
      if (EventStreamId.Length != 0) hash ^= EventStreamId.GetHashCode();
      if (ResolveLinkTos != false) hash ^= ResolveLinkTos.GetHashCode();
      if (StartFrom != 0L) hash ^= StartFrom.GetHashCode();
      if (MessageTimeoutMilliseconds != 0) hash ^= MessageTimeoutMilliseconds.GetHashCode();
      if (RecordStatistics != false) hash ^= RecordStatistics.GetHashCode();
      if (LiveBufferSize != 0) hash ^= LiveBufferSize.GetHashCode();
      if (ReadBatchSize != 0) hash ^= ReadBatchSize.GetHashCode();
      if (BufferSize != 0) hash ^= BufferSize.GetHashCode();
      if (MaxRetryCount != 0) hash ^= MaxRetryCount.GetHashCode();
      if (PreferRoundRobin != false) hash ^= PreferRoundRobin.GetHashCode();
      if (CheckpointAfterTime != 0) hash ^= CheckpointAfterTime.GetHashCode();
      if (CheckpointMaxCount != 0) hash ^= CheckpointMaxCount.GetHashCode();
      if (CheckpointMinCount != 0) hash ^= CheckpointMinCount.GetHashCode();
      if (SubscriberMaxCount != 0) hash ^= SubscriberMaxCount.GetHashCode();
      if (NamedConsumerStrategy.Length != 0) hash ^= NamedConsumerStrategy.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SubscriptionGroupName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SubscriptionGroupName);
      }
      if (EventStreamId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EventStreamId);
      }
      if (ResolveLinkTos != false) {
        output.WriteRawTag(24);
        output.WriteBool(ResolveLinkTos);
      }
      if (StartFrom != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(StartFrom);
      }
      if (MessageTimeoutMilliseconds != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MessageTimeoutMilliseconds);
      }
      if (RecordStatistics != false) {
        output.WriteRawTag(48);
        output.WriteBool(RecordStatistics);
      }
      if (LiveBufferSize != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(LiveBufferSize);
      }
      if (ReadBatchSize != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ReadBatchSize);
      }
      if (BufferSize != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(BufferSize);
      }
      if (MaxRetryCount != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MaxRetryCount);
      }
      if (PreferRoundRobin != false) {
        output.WriteRawTag(88);
        output.WriteBool(PreferRoundRobin);
      }
      if (CheckpointAfterTime != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(CheckpointAfterTime);
      }
      if (CheckpointMaxCount != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(CheckpointMaxCount);
      }
      if (CheckpointMinCount != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(CheckpointMinCount);
      }
      if (SubscriberMaxCount != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(SubscriberMaxCount);
      }
      if (NamedConsumerStrategy.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(NamedConsumerStrategy);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SubscriptionGroupName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubscriptionGroupName);
      }
      if (EventStreamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventStreamId);
      }
      if (ResolveLinkTos != false) {
        size += 1 + 1;
      }
      if (StartFrom != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartFrom);
      }
      if (MessageTimeoutMilliseconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MessageTimeoutMilliseconds);
      }
      if (RecordStatistics != false) {
        size += 1 + 1;
      }
      if (LiveBufferSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LiveBufferSize);
      }
      if (ReadBatchSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReadBatchSize);
      }
      if (BufferSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BufferSize);
      }
      if (MaxRetryCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxRetryCount);
      }
      if (PreferRoundRobin != false) {
        size += 1 + 1;
      }
      if (CheckpointAfterTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CheckpointAfterTime);
      }
      if (CheckpointMaxCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CheckpointMaxCount);
      }
      if (CheckpointMinCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CheckpointMinCount);
      }
      if (SubscriberMaxCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubscriberMaxCount);
      }
      if (NamedConsumerStrategy.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(NamedConsumerStrategy);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdatePersistentSubscription other) {
      if (other == null) {
        return;
      }
      if (other.SubscriptionGroupName.Length != 0) {
        SubscriptionGroupName = other.SubscriptionGroupName;
      }
      if (other.EventStreamId.Length != 0) {
        EventStreamId = other.EventStreamId;
      }
      if (other.ResolveLinkTos != false) {
        ResolveLinkTos = other.ResolveLinkTos;
      }
      if (other.StartFrom != 0L) {
        StartFrom = other.StartFrom;
      }
      if (other.MessageTimeoutMilliseconds != 0) {
        MessageTimeoutMilliseconds = other.MessageTimeoutMilliseconds;
      }
      if (other.RecordStatistics != false) {
        RecordStatistics = other.RecordStatistics;
      }
      if (other.LiveBufferSize != 0) {
        LiveBufferSize = other.LiveBufferSize;
      }
      if (other.ReadBatchSize != 0) {
        ReadBatchSize = other.ReadBatchSize;
      }
      if (other.BufferSize != 0) {
        BufferSize = other.BufferSize;
      }
      if (other.MaxRetryCount != 0) {
        MaxRetryCount = other.MaxRetryCount;
      }
      if (other.PreferRoundRobin != false) {
        PreferRoundRobin = other.PreferRoundRobin;
      }
      if (other.CheckpointAfterTime != 0) {
        CheckpointAfterTime = other.CheckpointAfterTime;
      }
      if (other.CheckpointMaxCount != 0) {
        CheckpointMaxCount = other.CheckpointMaxCount;
      }
      if (other.CheckpointMinCount != 0) {
        CheckpointMinCount = other.CheckpointMinCount;
      }
      if (other.SubscriberMaxCount != 0) {
        SubscriberMaxCount = other.SubscriberMaxCount;
      }
      if (other.NamedConsumerStrategy.Length != 0) {
        NamedConsumerStrategy = other.NamedConsumerStrategy;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SubscriptionGroupName = input.ReadString();
            break;
          }
          case 18: {
            EventStreamId = input.ReadString();
            break;
          }
          case 24: {
            ResolveLinkTos = input.ReadBool();
            break;
          }
          case 32: {
            StartFrom = input.ReadInt64();
            break;
          }
          case 40: {
            MessageTimeoutMilliseconds = input.ReadInt32();
            break;
          }
          case 48: {
            RecordStatistics = input.ReadBool();
            break;
          }
          case 56: {
            LiveBufferSize = input.ReadInt32();
            break;
          }
          case 64: {
            ReadBatchSize = input.ReadInt32();
            break;
          }
          case 72: {
            BufferSize = input.ReadInt32();
            break;
          }
          case 80: {
            MaxRetryCount = input.ReadInt32();
            break;
          }
          case 88: {
            PreferRoundRobin = input.ReadBool();
            break;
          }
          case 96: {
            CheckpointAfterTime = input.ReadInt32();
            break;
          }
          case 104: {
            CheckpointMaxCount = input.ReadInt32();
            break;
          }
          case 112: {
            CheckpointMinCount = input.ReadInt32();
            break;
          }
          case 120: {
            SubscriberMaxCount = input.ReadInt32();
            break;
          }
          case 130: {
            NamedConsumerStrategy = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdatePersistentSubscriptionCompleted : pb::IMessage<UpdatePersistentSubscriptionCompleted> {
    private static readonly pb::MessageParser<UpdatePersistentSubscriptionCompleted> _parser = new pb::MessageParser<UpdatePersistentSubscriptionCompleted>(() => new UpdatePersistentSubscriptionCompleted());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdatePersistentSubscriptionCompleted> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.Client.Messages.MessagesReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePersistentSubscriptionCompleted() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePersistentSubscriptionCompleted(UpdatePersistentSubscriptionCompleted other) : this() {
      result_ = other.result_;
      reason_ = other.reason_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdatePersistentSubscriptionCompleted Clone() {
      return new UpdatePersistentSubscriptionCompleted(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::EventStore.Client.Messages.UpdatePersistentSubscriptionCompleted.Types.UpdatePersistentSubscriptionResult result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.Client.Messages.UpdatePersistentSubscriptionCompleted.Types.UpdatePersistentSubscriptionResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 2;
    private string reason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdatePersistentSubscriptionCompleted);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdatePersistentSubscriptionCompleted other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (Reason != other.Reason) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Reason);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdatePersistentSubscriptionCompleted other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            result_ = (global::EventStore.Client.Messages.UpdatePersistentSubscriptionCompleted.Types.UpdatePersistentSubscriptionResult) input.ReadEnum();
            break;
          }
          case 18: {
            Reason = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the UpdatePersistentSubscriptionCompleted message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum UpdatePersistentSubscriptionResult {
        [pbr::OriginalName("Success")] Success = 0,
        [pbr::OriginalName("DoesNotExist")] DoesNotExist = 1,
        [pbr::OriginalName("Fail")] Fail = 2,
        [pbr::OriginalName("AccessDenied")] AccessDenied = 3,
      }

    }
    #endregion

  }

  public sealed partial class CreatePersistentSubscriptionCompleted : pb::IMessage<CreatePersistentSubscriptionCompleted> {
    private static readonly pb::MessageParser<CreatePersistentSubscriptionCompleted> _parser = new pb::MessageParser<CreatePersistentSubscriptionCompleted>(() => new CreatePersistentSubscriptionCompleted());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreatePersistentSubscriptionCompleted> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.Client.Messages.MessagesReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatePersistentSubscriptionCompleted() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatePersistentSubscriptionCompleted(CreatePersistentSubscriptionCompleted other) : this() {
      result_ = other.result_;
      reason_ = other.reason_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatePersistentSubscriptionCompleted Clone() {
      return new CreatePersistentSubscriptionCompleted(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::EventStore.Client.Messages.CreatePersistentSubscriptionCompleted.Types.CreatePersistentSubscriptionResult result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.Client.Messages.CreatePersistentSubscriptionCompleted.Types.CreatePersistentSubscriptionResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 2;
    private string reason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreatePersistentSubscriptionCompleted);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreatePersistentSubscriptionCompleted other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (Reason != other.Reason) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Reason);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreatePersistentSubscriptionCompleted other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            result_ = (global::EventStore.Client.Messages.CreatePersistentSubscriptionCompleted.Types.CreatePersistentSubscriptionResult) input.ReadEnum();
            break;
          }
          case 18: {
            Reason = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CreatePersistentSubscriptionCompleted message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum CreatePersistentSubscriptionResult {
        [pbr::OriginalName("Success")] Success = 0,
        [pbr::OriginalName("AlreadyExists")] AlreadyExists = 1,
        [pbr::OriginalName("Fail")] Fail = 2,
        [pbr::OriginalName("AccessDenied")] AccessDenied = 3,
      }

    }
    #endregion

  }

  public sealed partial class DeletePersistentSubscriptionCompleted : pb::IMessage<DeletePersistentSubscriptionCompleted> {
    private static readonly pb::MessageParser<DeletePersistentSubscriptionCompleted> _parser = new pb::MessageParser<DeletePersistentSubscriptionCompleted>(() => new DeletePersistentSubscriptionCompleted());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeletePersistentSubscriptionCompleted> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.Client.Messages.MessagesReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeletePersistentSubscriptionCompleted() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeletePersistentSubscriptionCompleted(DeletePersistentSubscriptionCompleted other) : this() {
      result_ = other.result_;
      reason_ = other.reason_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeletePersistentSubscriptionCompleted Clone() {
      return new DeletePersistentSubscriptionCompleted(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::EventStore.Client.Messages.DeletePersistentSubscriptionCompleted.Types.DeletePersistentSubscriptionResult result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.Client.Messages.DeletePersistentSubscriptionCompleted.Types.DeletePersistentSubscriptionResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 2;
    private string reason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeletePersistentSubscriptionCompleted);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeletePersistentSubscriptionCompleted other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (Reason != other.Reason) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Reason);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeletePersistentSubscriptionCompleted other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            result_ = (global::EventStore.Client.Messages.DeletePersistentSubscriptionCompleted.Types.DeletePersistentSubscriptionResult) input.ReadEnum();
            break;
          }
          case 18: {
            Reason = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DeletePersistentSubscriptionCompleted message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum DeletePersistentSubscriptionResult {
        [pbr::OriginalName("Success")] Success = 0,
        [pbr::OriginalName("DoesNotExist")] DoesNotExist = 1,
        [pbr::OriginalName("Fail")] Fail = 2,
        [pbr::OriginalName("AccessDenied")] AccessDenied = 3,
      }

    }
    #endregion

  }

  public sealed partial class ConnectToPersistentSubscription : pb::IMessage<ConnectToPersistentSubscription> {
    private static readonly pb::MessageParser<ConnectToPersistentSubscription> _parser = new pb::MessageParser<ConnectToPersistentSubscription>(() => new ConnectToPersistentSubscription());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectToPersistentSubscription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.Client.Messages.MessagesReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectToPersistentSubscription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectToPersistentSubscription(ConnectToPersistentSubscription other) : this() {
      subscriptionId_ = other.subscriptionId_;
      eventStreamId_ = other.eventStreamId_;
      allowedInFlightMessages_ = other.allowedInFlightMessages_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectToPersistentSubscription Clone() {
      return new ConnectToPersistentSubscription(this);
    }

    /// <summary>Field number for the "subscription_id" field.</summary>
    public const int SubscriptionIdFieldNumber = 1;
    private string subscriptionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubscriptionId {
      get { return subscriptionId_; }
      set {
        subscriptionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "event_stream_id" field.</summary>
    public const int EventStreamIdFieldNumber = 2;
    private string eventStreamId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventStreamId {
      get { return eventStreamId_; }
      set {
        eventStreamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "allowed_in_flight_messages" field.</summary>
    public const int AllowedInFlightMessagesFieldNumber = 3;
    private int allowedInFlightMessages_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AllowedInFlightMessages {
      get { return allowedInFlightMessages_; }
      set {
        allowedInFlightMessages_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectToPersistentSubscription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectToPersistentSubscription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SubscriptionId != other.SubscriptionId) return false;
      if (EventStreamId != other.EventStreamId) return false;
      if (AllowedInFlightMessages != other.AllowedInFlightMessages) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SubscriptionId.Length != 0) hash ^= SubscriptionId.GetHashCode();
      if (EventStreamId.Length != 0) hash ^= EventStreamId.GetHashCode();
      if (AllowedInFlightMessages != 0) hash ^= AllowedInFlightMessages.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SubscriptionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SubscriptionId);
      }
      if (EventStreamId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EventStreamId);
      }
      if (AllowedInFlightMessages != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AllowedInFlightMessages);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SubscriptionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubscriptionId);
      }
      if (EventStreamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventStreamId);
      }
      if (AllowedInFlightMessages != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AllowedInFlightMessages);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectToPersistentSubscription other) {
      if (other == null) {
        return;
      }
      if (other.SubscriptionId.Length != 0) {
        SubscriptionId = other.SubscriptionId;
      }
      if (other.EventStreamId.Length != 0) {
        EventStreamId = other.EventStreamId;
      }
      if (other.AllowedInFlightMessages != 0) {
        AllowedInFlightMessages = other.AllowedInFlightMessages;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SubscriptionId = input.ReadString();
            break;
          }
          case 18: {
            EventStreamId = input.ReadString();
            break;
          }
          case 24: {
            AllowedInFlightMessages = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PersistentSubscriptionAckEvents : pb::IMessage<PersistentSubscriptionAckEvents> {
    private static readonly pb::MessageParser<PersistentSubscriptionAckEvents> _parser = new pb::MessageParser<PersistentSubscriptionAckEvents>(() => new PersistentSubscriptionAckEvents());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PersistentSubscriptionAckEvents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.Client.Messages.MessagesReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PersistentSubscriptionAckEvents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PersistentSubscriptionAckEvents(PersistentSubscriptionAckEvents other) : this() {
      subscriptionId_ = other.subscriptionId_;
      processedEventIds_ = other.processedEventIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PersistentSubscriptionAckEvents Clone() {
      return new PersistentSubscriptionAckEvents(this);
    }

    /// <summary>Field number for the "subscription_id" field.</summary>
    public const int SubscriptionIdFieldNumber = 1;
    private string subscriptionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubscriptionId {
      get { return subscriptionId_; }
      set {
        subscriptionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "processed_event_ids" field.</summary>
    public const int ProcessedEventIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_processedEventIds_codec
        = pb::FieldCodec.ForBytes(18);
    private readonly pbc::RepeatedField<pb::ByteString> processedEventIds_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> ProcessedEventIds {
      get { return processedEventIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PersistentSubscriptionAckEvents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PersistentSubscriptionAckEvents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SubscriptionId != other.SubscriptionId) return false;
      if(!processedEventIds_.Equals(other.processedEventIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SubscriptionId.Length != 0) hash ^= SubscriptionId.GetHashCode();
      hash ^= processedEventIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SubscriptionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SubscriptionId);
      }
      processedEventIds_.WriteTo(output, _repeated_processedEventIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SubscriptionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubscriptionId);
      }
      size += processedEventIds_.CalculateSize(_repeated_processedEventIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PersistentSubscriptionAckEvents other) {
      if (other == null) {
        return;
      }
      if (other.SubscriptionId.Length != 0) {
        SubscriptionId = other.SubscriptionId;
      }
      processedEventIds_.Add(other.processedEventIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SubscriptionId = input.ReadString();
            break;
          }
          case 18: {
            processedEventIds_.AddEntriesFrom(input, _repeated_processedEventIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PersistentSubscriptionNakEvents : pb::IMessage<PersistentSubscriptionNakEvents> {
    private static readonly pb::MessageParser<PersistentSubscriptionNakEvents> _parser = new pb::MessageParser<PersistentSubscriptionNakEvents>(() => new PersistentSubscriptionNakEvents());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PersistentSubscriptionNakEvents> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.Client.Messages.MessagesReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PersistentSubscriptionNakEvents() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PersistentSubscriptionNakEvents(PersistentSubscriptionNakEvents other) : this() {
      subscriptionId_ = other.subscriptionId_;
      processedEventIds_ = other.processedEventIds_.Clone();
      message_ = other.message_;
      action_ = other.action_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PersistentSubscriptionNakEvents Clone() {
      return new PersistentSubscriptionNakEvents(this);
    }

    /// <summary>Field number for the "subscription_id" field.</summary>
    public const int SubscriptionIdFieldNumber = 1;
    private string subscriptionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubscriptionId {
      get { return subscriptionId_; }
      set {
        subscriptionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "processed_event_ids" field.</summary>
    public const int ProcessedEventIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_processedEventIds_codec
        = pb::FieldCodec.ForBytes(18);
    private readonly pbc::RepeatedField<pb::ByteString> processedEventIds_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> ProcessedEventIds {
      get { return processedEventIds_; }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 3;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 4;
    private global::EventStore.Client.Messages.PersistentSubscriptionNakEvents.Types.NakAction action_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.Client.Messages.PersistentSubscriptionNakEvents.Types.NakAction Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PersistentSubscriptionNakEvents);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PersistentSubscriptionNakEvents other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SubscriptionId != other.SubscriptionId) return false;
      if(!processedEventIds_.Equals(other.processedEventIds_)) return false;
      if (Message != other.Message) return false;
      if (Action != other.Action) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SubscriptionId.Length != 0) hash ^= SubscriptionId.GetHashCode();
      hash ^= processedEventIds_.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (Action != 0) hash ^= Action.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SubscriptionId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SubscriptionId);
      }
      processedEventIds_.WriteTo(output, _repeated_processedEventIds_codec);
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (Action != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Action);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SubscriptionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubscriptionId);
      }
      size += processedEventIds_.CalculateSize(_repeated_processedEventIds_codec);
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Action != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PersistentSubscriptionNakEvents other) {
      if (other == null) {
        return;
      }
      if (other.SubscriptionId.Length != 0) {
        SubscriptionId = other.SubscriptionId;
      }
      processedEventIds_.Add(other.processedEventIds_);
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.Action != 0) {
        Action = other.Action;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SubscriptionId = input.ReadString();
            break;
          }
          case 18: {
            processedEventIds_.AddEntriesFrom(input, _repeated_processedEventIds_codec);
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 32: {
            action_ = (global::EventStore.Client.Messages.PersistentSubscriptionNakEvents.Types.NakAction) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PersistentSubscriptionNakEvents message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum NakAction {
        [pbr::OriginalName("Unknown")] Unknown = 0,
        [pbr::OriginalName("Park")] Park = 1,
        [pbr::OriginalName("Retry")] Retry = 2,
        [pbr::OriginalName("Skip")] Skip = 3,
        [pbr::OriginalName("Stop")] Stop = 4,
      }

    }
    #endregion

  }

  public sealed partial class PersistentSubscriptionConfirmation : pb::IMessage<PersistentSubscriptionConfirmation> {
    private static readonly pb::MessageParser<PersistentSubscriptionConfirmation> _parser = new pb::MessageParser<PersistentSubscriptionConfirmation>(() => new PersistentSubscriptionConfirmation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PersistentSubscriptionConfirmation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.Client.Messages.MessagesReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PersistentSubscriptionConfirmation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PersistentSubscriptionConfirmation(PersistentSubscriptionConfirmation other) : this() {
      lastCommitPosition_ = other.lastCommitPosition_;
      subscriptionId_ = other.subscriptionId_;
      lastEventNumber_ = other.lastEventNumber_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PersistentSubscriptionConfirmation Clone() {
      return new PersistentSubscriptionConfirmation(this);
    }

    /// <summary>Field number for the "last_commit_position" field.</summary>
    public const int LastCommitPositionFieldNumber = 1;
    private long lastCommitPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastCommitPosition {
      get { return lastCommitPosition_; }
      set {
        lastCommitPosition_ = value;
      }
    }

    /// <summary>Field number for the "subscription_id" field.</summary>
    public const int SubscriptionIdFieldNumber = 2;
    private string subscriptionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubscriptionId {
      get { return subscriptionId_; }
      set {
        subscriptionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_event_number" field.</summary>
    public const int LastEventNumberFieldNumber = 3;
    private long lastEventNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastEventNumber {
      get { return lastEventNumber_; }
      set {
        lastEventNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PersistentSubscriptionConfirmation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PersistentSubscriptionConfirmation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LastCommitPosition != other.LastCommitPosition) return false;
      if (SubscriptionId != other.SubscriptionId) return false;
      if (LastEventNumber != other.LastEventNumber) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LastCommitPosition != 0L) hash ^= LastCommitPosition.GetHashCode();
      if (SubscriptionId.Length != 0) hash ^= SubscriptionId.GetHashCode();
      if (LastEventNumber != 0L) hash ^= LastEventNumber.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LastCommitPosition != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(LastCommitPosition);
      }
      if (SubscriptionId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SubscriptionId);
      }
      if (LastEventNumber != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(LastEventNumber);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LastCommitPosition != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastCommitPosition);
      }
      if (SubscriptionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubscriptionId);
      }
      if (LastEventNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastEventNumber);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PersistentSubscriptionConfirmation other) {
      if (other == null) {
        return;
      }
      if (other.LastCommitPosition != 0L) {
        LastCommitPosition = other.LastCommitPosition;
      }
      if (other.SubscriptionId.Length != 0) {
        SubscriptionId = other.SubscriptionId;
      }
      if (other.LastEventNumber != 0L) {
        LastEventNumber = other.LastEventNumber;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LastCommitPosition = input.ReadInt64();
            break;
          }
          case 18: {
            SubscriptionId = input.ReadString();
            break;
          }
          case 24: {
            LastEventNumber = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PersistentSubscriptionStreamEventAppeared : pb::IMessage<PersistentSubscriptionStreamEventAppeared> {
    private static readonly pb::MessageParser<PersistentSubscriptionStreamEventAppeared> _parser = new pb::MessageParser<PersistentSubscriptionStreamEventAppeared>(() => new PersistentSubscriptionStreamEventAppeared());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PersistentSubscriptionStreamEventAppeared> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.Client.Messages.MessagesReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PersistentSubscriptionStreamEventAppeared() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PersistentSubscriptionStreamEventAppeared(PersistentSubscriptionStreamEventAppeared other) : this() {
      Event = other.event_ != null ? other.Event.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PersistentSubscriptionStreamEventAppeared Clone() {
      return new PersistentSubscriptionStreamEventAppeared(this);
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 1;
    private global::EventStore.Client.Messages.ResolvedIndexedEvent event_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.Client.Messages.ResolvedIndexedEvent Event {
      get { return event_; }
      set {
        event_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PersistentSubscriptionStreamEventAppeared);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PersistentSubscriptionStreamEventAppeared other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Event, other.Event)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (event_ != null) hash ^= Event.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (event_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Event);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (event_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Event);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PersistentSubscriptionStreamEventAppeared other) {
      if (other == null) {
        return;
      }
      if (other.event_ != null) {
        if (event_ == null) {
          event_ = new global::EventStore.Client.Messages.ResolvedIndexedEvent();
        }
        Event.MergeFrom(other.Event);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (event_ == null) {
              event_ = new global::EventStore.Client.Messages.ResolvedIndexedEvent();
            }
            input.ReadMessage(event_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SubscribeToStream : pb::IMessage<SubscribeToStream> {
    private static readonly pb::MessageParser<SubscribeToStream> _parser = new pb::MessageParser<SubscribeToStream>(() => new SubscribeToStream());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubscribeToStream> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.Client.Messages.MessagesReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeToStream() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeToStream(SubscribeToStream other) : this() {
      eventStreamId_ = other.eventStreamId_;
      resolveLinkTos_ = other.resolveLinkTos_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscribeToStream Clone() {
      return new SubscribeToStream(this);
    }

    /// <summary>Field number for the "event_stream_id" field.</summary>
    public const int EventStreamIdFieldNumber = 1;
    private string eventStreamId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventStreamId {
      get { return eventStreamId_; }
      set {
        eventStreamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "resolve_link_tos" field.</summary>
    public const int ResolveLinkTosFieldNumber = 2;
    private bool resolveLinkTos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ResolveLinkTos {
      get { return resolveLinkTos_; }
      set {
        resolveLinkTos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubscribeToStream);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubscribeToStream other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventStreamId != other.EventStreamId) return false;
      if (ResolveLinkTos != other.ResolveLinkTos) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventStreamId.Length != 0) hash ^= EventStreamId.GetHashCode();
      if (ResolveLinkTos != false) hash ^= ResolveLinkTos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventStreamId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EventStreamId);
      }
      if (ResolveLinkTos != false) {
        output.WriteRawTag(16);
        output.WriteBool(ResolveLinkTos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventStreamId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventStreamId);
      }
      if (ResolveLinkTos != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubscribeToStream other) {
      if (other == null) {
        return;
      }
      if (other.EventStreamId.Length != 0) {
        EventStreamId = other.EventStreamId;
      }
      if (other.ResolveLinkTos != false) {
        ResolveLinkTos = other.ResolveLinkTos;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            EventStreamId = input.ReadString();
            break;
          }
          case 16: {
            ResolveLinkTos = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SubscriptionConfirmation : pb::IMessage<SubscriptionConfirmation> {
    private static readonly pb::MessageParser<SubscriptionConfirmation> _parser = new pb::MessageParser<SubscriptionConfirmation>(() => new SubscriptionConfirmation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubscriptionConfirmation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.Client.Messages.MessagesReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscriptionConfirmation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscriptionConfirmation(SubscriptionConfirmation other) : this() {
      lastCommitPosition_ = other.lastCommitPosition_;
      lastEventNumber_ = other.lastEventNumber_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscriptionConfirmation Clone() {
      return new SubscriptionConfirmation(this);
    }

    /// <summary>Field number for the "last_commit_position" field.</summary>
    public const int LastCommitPositionFieldNumber = 1;
    private long lastCommitPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastCommitPosition {
      get { return lastCommitPosition_; }
      set {
        lastCommitPosition_ = value;
      }
    }

    /// <summary>Field number for the "last_event_number" field.</summary>
    public const int LastEventNumberFieldNumber = 2;
    private long lastEventNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastEventNumber {
      get { return lastEventNumber_; }
      set {
        lastEventNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubscriptionConfirmation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubscriptionConfirmation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LastCommitPosition != other.LastCommitPosition) return false;
      if (LastEventNumber != other.LastEventNumber) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LastCommitPosition != 0L) hash ^= LastCommitPosition.GetHashCode();
      if (LastEventNumber != 0L) hash ^= LastEventNumber.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LastCommitPosition != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(LastCommitPosition);
      }
      if (LastEventNumber != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(LastEventNumber);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LastCommitPosition != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastCommitPosition);
      }
      if (LastEventNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastEventNumber);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubscriptionConfirmation other) {
      if (other == null) {
        return;
      }
      if (other.LastCommitPosition != 0L) {
        LastCommitPosition = other.LastCommitPosition;
      }
      if (other.LastEventNumber != 0L) {
        LastEventNumber = other.LastEventNumber;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LastCommitPosition = input.ReadInt64();
            break;
          }
          case 16: {
            LastEventNumber = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StreamEventAppeared : pb::IMessage<StreamEventAppeared> {
    private static readonly pb::MessageParser<StreamEventAppeared> _parser = new pb::MessageParser<StreamEventAppeared>(() => new StreamEventAppeared());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StreamEventAppeared> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.Client.Messages.MessagesReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamEventAppeared() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamEventAppeared(StreamEventAppeared other) : this() {
      Event = other.event_ != null ? other.Event.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StreamEventAppeared Clone() {
      return new StreamEventAppeared(this);
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 1;
    private global::EventStore.Client.Messages.ResolvedEvent event_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.Client.Messages.ResolvedEvent Event {
      get { return event_; }
      set {
        event_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StreamEventAppeared);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StreamEventAppeared other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Event, other.Event)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (event_ != null) hash ^= Event.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (event_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Event);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (event_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Event);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StreamEventAppeared other) {
      if (other == null) {
        return;
      }
      if (other.event_ != null) {
        if (event_ == null) {
          event_ = new global::EventStore.Client.Messages.ResolvedEvent();
        }
        Event.MergeFrom(other.Event);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (event_ == null) {
              event_ = new global::EventStore.Client.Messages.ResolvedEvent();
            }
            input.ReadMessage(event_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnsubscribeFromStream : pb::IMessage<UnsubscribeFromStream> {
    private static readonly pb::MessageParser<UnsubscribeFromStream> _parser = new pb::MessageParser<UnsubscribeFromStream>(() => new UnsubscribeFromStream());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnsubscribeFromStream> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.Client.Messages.MessagesReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnsubscribeFromStream() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnsubscribeFromStream(UnsubscribeFromStream other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnsubscribeFromStream Clone() {
      return new UnsubscribeFromStream(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnsubscribeFromStream);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnsubscribeFromStream other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnsubscribeFromStream other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class SubscriptionDropped : pb::IMessage<SubscriptionDropped> {
    private static readonly pb::MessageParser<SubscriptionDropped> _parser = new pb::MessageParser<SubscriptionDropped>(() => new SubscriptionDropped());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubscriptionDropped> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.Client.Messages.MessagesReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscriptionDropped() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscriptionDropped(SubscriptionDropped other) : this() {
      reason_ = other.reason_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubscriptionDropped Clone() {
      return new SubscriptionDropped(this);
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 1;
    private global::EventStore.Client.Messages.SubscriptionDropped.Types.SubscriptionDropReason reason_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.Client.Messages.SubscriptionDropped.Types.SubscriptionDropReason Reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubscriptionDropped);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubscriptionDropped other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Reason != other.Reason) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Reason != 0) hash ^= Reason.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Reason != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Reason);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Reason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Reason);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubscriptionDropped other) {
      if (other == null) {
        return;
      }
      if (other.Reason != 0) {
        Reason = other.Reason;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            reason_ = (global::EventStore.Client.Messages.SubscriptionDropped.Types.SubscriptionDropReason) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SubscriptionDropped message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum SubscriptionDropReason {
        [pbr::OriginalName("Unsubscribed")] Unsubscribed = 0,
        [pbr::OriginalName("AccessDenied")] AccessDenied = 1,
        [pbr::OriginalName("NotFound")] NotFound = 2,
        [pbr::OriginalName("PersistentSubscriptionDeleted")] PersistentSubscriptionDeleted = 3,
        [pbr::OriginalName("SubscriberMaxCountReached")] SubscriberMaxCountReached = 4,
      }

    }
    #endregion

  }

  public sealed partial class NotHandled : pb::IMessage<NotHandled> {
    private static readonly pb::MessageParser<NotHandled> _parser = new pb::MessageParser<NotHandled>(() => new NotHandled());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotHandled> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.Client.Messages.MessagesReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotHandled() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotHandled(NotHandled other) : this() {
      reason_ = other.reason_;
      additionalInfo_ = other.additionalInfo_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotHandled Clone() {
      return new NotHandled(this);
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 1;
    private global::EventStore.Client.Messages.NotHandled.Types.NotHandledReason reason_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.Client.Messages.NotHandled.Types.NotHandledReason Reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    /// <summary>Field number for the "additional_info" field.</summary>
    public const int AdditionalInfoFieldNumber = 2;
    private pb::ByteString additionalInfo_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AdditionalInfo {
      get { return additionalInfo_; }
      set {
        additionalInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotHandled);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotHandled other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Reason != other.Reason) return false;
      if (AdditionalInfo != other.AdditionalInfo) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Reason != 0) hash ^= Reason.GetHashCode();
      if (AdditionalInfo.Length != 0) hash ^= AdditionalInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Reason != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Reason);
      }
      if (AdditionalInfo.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(AdditionalInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Reason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Reason);
      }
      if (AdditionalInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AdditionalInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotHandled other) {
      if (other == null) {
        return;
      }
      if (other.Reason != 0) {
        Reason = other.Reason;
      }
      if (other.AdditionalInfo.Length != 0) {
        AdditionalInfo = other.AdditionalInfo;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            reason_ = (global::EventStore.Client.Messages.NotHandled.Types.NotHandledReason) input.ReadEnum();
            break;
          }
          case 18: {
            AdditionalInfo = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the NotHandled message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum NotHandledReason {
        [pbr::OriginalName("NotReady")] NotReady = 0,
        [pbr::OriginalName("TooBusy")] TooBusy = 1,
        [pbr::OriginalName("NotMaster")] NotMaster = 2,
      }

      public sealed partial class MasterInfo : pb::IMessage<MasterInfo> {
        private static readonly pb::MessageParser<MasterInfo> _parser = new pb::MessageParser<MasterInfo>(() => new MasterInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MasterInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::EventStore.Client.Messages.NotHandled.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MasterInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MasterInfo(MasterInfo other) : this() {
          externalTcpAddress_ = other.externalTcpAddress_;
          externalTcpPort_ = other.externalTcpPort_;
          externalHttpAddress_ = other.externalHttpAddress_;
          externalHttpPort_ = other.externalHttpPort_;
          externalSecureTcpAddress_ = other.externalSecureTcpAddress_;
          externalSecureTcpPort_ = other.externalSecureTcpPort_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MasterInfo Clone() {
          return new MasterInfo(this);
        }

        /// <summary>Field number for the "external_tcp_address" field.</summary>
        public const int ExternalTcpAddressFieldNumber = 1;
        private string externalTcpAddress_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ExternalTcpAddress {
          get { return externalTcpAddress_; }
          set {
            externalTcpAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "external_tcp_port" field.</summary>
        public const int ExternalTcpPortFieldNumber = 2;
        private int externalTcpPort_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ExternalTcpPort {
          get { return externalTcpPort_; }
          set {
            externalTcpPort_ = value;
          }
        }

        /// <summary>Field number for the "external_http_address" field.</summary>
        public const int ExternalHttpAddressFieldNumber = 3;
        private string externalHttpAddress_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ExternalHttpAddress {
          get { return externalHttpAddress_; }
          set {
            externalHttpAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "external_http_port" field.</summary>
        public const int ExternalHttpPortFieldNumber = 4;
        private int externalHttpPort_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ExternalHttpPort {
          get { return externalHttpPort_; }
          set {
            externalHttpPort_ = value;
          }
        }

        /// <summary>Field number for the "external_secure_tcp_address" field.</summary>
        public const int ExternalSecureTcpAddressFieldNumber = 5;
        private string externalSecureTcpAddress_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ExternalSecureTcpAddress {
          get { return externalSecureTcpAddress_; }
          set {
            externalSecureTcpAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "external_secure_tcp_port" field.</summary>
        public const int ExternalSecureTcpPortFieldNumber = 6;
        private int externalSecureTcpPort_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ExternalSecureTcpPort {
          get { return externalSecureTcpPort_; }
          set {
            externalSecureTcpPort_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MasterInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MasterInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ExternalTcpAddress != other.ExternalTcpAddress) return false;
          if (ExternalTcpPort != other.ExternalTcpPort) return false;
          if (ExternalHttpAddress != other.ExternalHttpAddress) return false;
          if (ExternalHttpPort != other.ExternalHttpPort) return false;
          if (ExternalSecureTcpAddress != other.ExternalSecureTcpAddress) return false;
          if (ExternalSecureTcpPort != other.ExternalSecureTcpPort) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ExternalTcpAddress.Length != 0) hash ^= ExternalTcpAddress.GetHashCode();
          if (ExternalTcpPort != 0) hash ^= ExternalTcpPort.GetHashCode();
          if (ExternalHttpAddress.Length != 0) hash ^= ExternalHttpAddress.GetHashCode();
          if (ExternalHttpPort != 0) hash ^= ExternalHttpPort.GetHashCode();
          if (ExternalSecureTcpAddress.Length != 0) hash ^= ExternalSecureTcpAddress.GetHashCode();
          if (ExternalSecureTcpPort != 0) hash ^= ExternalSecureTcpPort.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (ExternalTcpAddress.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(ExternalTcpAddress);
          }
          if (ExternalTcpPort != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(ExternalTcpPort);
          }
          if (ExternalHttpAddress.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(ExternalHttpAddress);
          }
          if (ExternalHttpPort != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(ExternalHttpPort);
          }
          if (ExternalSecureTcpAddress.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(ExternalSecureTcpAddress);
          }
          if (ExternalSecureTcpPort != 0) {
            output.WriteRawTag(48);
            output.WriteInt32(ExternalSecureTcpPort);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ExternalTcpAddress.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ExternalTcpAddress);
          }
          if (ExternalTcpPort != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExternalTcpPort);
          }
          if (ExternalHttpAddress.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ExternalHttpAddress);
          }
          if (ExternalHttpPort != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExternalHttpPort);
          }
          if (ExternalSecureTcpAddress.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ExternalSecureTcpAddress);
          }
          if (ExternalSecureTcpPort != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExternalSecureTcpPort);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MasterInfo other) {
          if (other == null) {
            return;
          }
          if (other.ExternalTcpAddress.Length != 0) {
            ExternalTcpAddress = other.ExternalTcpAddress;
          }
          if (other.ExternalTcpPort != 0) {
            ExternalTcpPort = other.ExternalTcpPort;
          }
          if (other.ExternalHttpAddress.Length != 0) {
            ExternalHttpAddress = other.ExternalHttpAddress;
          }
          if (other.ExternalHttpPort != 0) {
            ExternalHttpPort = other.ExternalHttpPort;
          }
          if (other.ExternalSecureTcpAddress.Length != 0) {
            ExternalSecureTcpAddress = other.ExternalSecureTcpAddress;
          }
          if (other.ExternalSecureTcpPort != 0) {
            ExternalSecureTcpPort = other.ExternalSecureTcpPort;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                ExternalTcpAddress = input.ReadString();
                break;
              }
              case 16: {
                ExternalTcpPort = input.ReadInt32();
                break;
              }
              case 26: {
                ExternalHttpAddress = input.ReadString();
                break;
              }
              case 32: {
                ExternalHttpPort = input.ReadInt32();
                break;
              }
              case 42: {
                ExternalSecureTcpAddress = input.ReadString();
                break;
              }
              case 48: {
                ExternalSecureTcpPort = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class ScavengeDatabase : pb::IMessage<ScavengeDatabase> {
    private static readonly pb::MessageParser<ScavengeDatabase> _parser = new pb::MessageParser<ScavengeDatabase>(() => new ScavengeDatabase());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScavengeDatabase> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.Client.Messages.MessagesReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScavengeDatabase() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScavengeDatabase(ScavengeDatabase other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScavengeDatabase Clone() {
      return new ScavengeDatabase(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScavengeDatabase);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScavengeDatabase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScavengeDatabase other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ScavengeDatabaseCompleted : pb::IMessage<ScavengeDatabaseCompleted> {
    private static readonly pb::MessageParser<ScavengeDatabaseCompleted> _parser = new pb::MessageParser<ScavengeDatabaseCompleted>(() => new ScavengeDatabaseCompleted());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScavengeDatabaseCompleted> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.Client.Messages.MessagesReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScavengeDatabaseCompleted() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScavengeDatabaseCompleted(ScavengeDatabaseCompleted other) : this() {
      result_ = other.result_;
      error_ = other.error_;
      totalTimeMs_ = other.totalTimeMs_;
      totalSpaceSaved_ = other.totalSpaceSaved_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScavengeDatabaseCompleted Clone() {
      return new ScavengeDatabaseCompleted(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::EventStore.Client.Messages.ScavengeDatabaseCompleted.Types.ScavengeResult result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::EventStore.Client.Messages.ScavengeDatabaseCompleted.Types.ScavengeResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 2;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "total_time_ms" field.</summary>
    public const int TotalTimeMsFieldNumber = 3;
    private int totalTimeMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalTimeMs {
      get { return totalTimeMs_; }
      set {
        totalTimeMs_ = value;
      }
    }

    /// <summary>Field number for the "total_space_saved" field.</summary>
    public const int TotalSpaceSavedFieldNumber = 4;
    private long totalSpaceSaved_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalSpaceSaved {
      get { return totalSpaceSaved_; }
      set {
        totalSpaceSaved_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScavengeDatabaseCompleted);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScavengeDatabaseCompleted other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (Error != other.Error) return false;
      if (TotalTimeMs != other.TotalTimeMs) return false;
      if (TotalSpaceSaved != other.TotalSpaceSaved) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (TotalTimeMs != 0) hash ^= TotalTimeMs.GetHashCode();
      if (TotalSpaceSaved != 0L) hash ^= TotalSpaceSaved.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Error);
      }
      if (TotalTimeMs != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TotalTimeMs);
      }
      if (TotalSpaceSaved != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(TotalSpaceSaved);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (TotalTimeMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalTimeMs);
      }
      if (TotalSpaceSaved != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalSpaceSaved);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScavengeDatabaseCompleted other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      if (other.TotalTimeMs != 0) {
        TotalTimeMs = other.TotalTimeMs;
      }
      if (other.TotalSpaceSaved != 0L) {
        TotalSpaceSaved = other.TotalSpaceSaved;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            result_ = (global::EventStore.Client.Messages.ScavengeDatabaseCompleted.Types.ScavengeResult) input.ReadEnum();
            break;
          }
          case 18: {
            Error = input.ReadString();
            break;
          }
          case 24: {
            TotalTimeMs = input.ReadInt32();
            break;
          }
          case 32: {
            TotalSpaceSaved = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ScavengeDatabaseCompleted message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ScavengeResult {
        [pbr::OriginalName("Success")] Success = 0,
        [pbr::OriginalName("InProgress")] InProgress = 1,
        [pbr::OriginalName("Failed")] Failed = 2,
      }

    }
    #endregion

  }

  public sealed partial class IdentifyClient : pb::IMessage<IdentifyClient> {
    private static readonly pb::MessageParser<IdentifyClient> _parser = new pb::MessageParser<IdentifyClient>(() => new IdentifyClient());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IdentifyClient> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.Client.Messages.MessagesReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdentifyClient() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdentifyClient(IdentifyClient other) : this() {
      version_ = other.version_;
      connectionName_ = other.connectionName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdentifyClient Clone() {
      return new IdentifyClient(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private int version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "connection_name" field.</summary>
    public const int ConnectionNameFieldNumber = 2;
    private string connectionName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConnectionName {
      get { return connectionName_; }
      set {
        connectionName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IdentifyClient);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IdentifyClient other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (ConnectionName != other.ConnectionName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version != 0) hash ^= Version.GetHashCode();
      if (ConnectionName.Length != 0) hash ^= ConnectionName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Version);
      }
      if (ConnectionName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ConnectionName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (ConnectionName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectionName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IdentifyClient other) {
      if (other == null) {
        return;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.ConnectionName.Length != 0) {
        ConnectionName = other.ConnectionName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Version = input.ReadInt32();
            break;
          }
          case 18: {
            ConnectionName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClientIdentified : pb::IMessage<ClientIdentified> {
    private static readonly pb::MessageParser<ClientIdentified> _parser = new pb::MessageParser<ClientIdentified>(() => new ClientIdentified());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientIdentified> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::EventStore.Client.Messages.MessagesReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientIdentified() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientIdentified(ClientIdentified other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientIdentified Clone() {
      return new ClientIdentified(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientIdentified);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientIdentified other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientIdentified other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
